/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.generator

import fr.ensma.gimpleDsl.FunctionDef
import fr.ensma.gimpleDsl.TAC
import java.io.FileReader
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import static extension com.google.common.io.CharStreams.*
import java.io.FileWriter
import java.io.File
import java.util.HashMap
import java.util.Map.Entry

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GimpleDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var str = ""
		val file = new File ('C:\\Users\\kamnis\\Desktop\\runtime-New_configuration\\testgimple2\\testgimple2.melodymodeller')
		val fileLines = new FileReader(file).readLines
		val strMap = new HashMap<Integer,String>()

		var model = resource.contents.head as TAC
		var content =""
		for (FunctionDef function : model.functionDef){
//			content += '\t<function name="'+function.name.name+'" >\n'
//returns="'+f.returnedType+'">\n'
//			if(function.functionparam.ge != null && function.paramType!= null){
	
//				for (var i=0;i<function.functionparam.length;i++){
//				content += '\t\t<parameter name="'+function.functionparam.get(i).name+'" type="'+function.functionparam.get(i).datatype+'"/>\n'
//			}
//			content += '\t\t<content>'+function.functionparam.get(i).name+'</content>\n\t</function>\n'
//				}
			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'"/>\n'
		}
//		content += '</functionSet>' + '\n' /* + str*/
		var i = 0
		for (String line : fileLines){
			str += line + "\n" 
			strMap.put(i++, line)
			if(line.contains('<header xsi:type="deployment:AADLThreadHeader" id="_ZQF58ZTAEeyRSOvT88IE-Q"/>')){
                  	str += content
                  	strMap.put(i++, content)
                  }
		}
		val writer = new FileWriter(file)
		print("str length is = "+str.length)
		for(Entry line:strMap.entrySet)
			writer.write(line)
		fsa.generateFile('capellatest.xml', str)
	}
}
