/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.generator

import fr.ensma.gimpleDsl.FunctionCall
import fr.ensma.gimpleDsl.FunctionDef
import fr.ensma.gimpleDsl.Instruction
import fr.ensma.gimpleDsl.TAC
import java.io.File
import java.io.FileReader
import java.io.FileWriter
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import static extension com.google.common.io.CharStreams.*
import javax.inject.Inject
import org.eclipse.xtext.resource.IContainer
import org.eclipse.xtext.resource.IResourceDescriptions
import org.eclipse.emf.ecore.resource.ResourceSet

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GimpleDslGenerator extends AbstractGenerator implements IGimpleGenerator {
	
	val file = new File ('C:\\Users\\kamnis\\Desktop\\runtime-New_configuration\\gimple\\gimple.melodymodeller')
	val fileLines = new FileReader(file).readLines
	

//	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {	
//		var str = ""
//		var model = resource.contents.head as TAC
////		var model = resource.
//		var content =""
//		for (FunctionDef function : model.functionDef){
//			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'">\n'
//			for(Instruction inst: function.codeBlock.instruction){
//				if(inst.functionCall !==null)
//
//					content += '\t\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+inst.functionCall.calledFunction.name+'"/>\n'
//			}
//			content += '\t\t\t\t\t</ownedExtensions>\n'	
////			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'"/>\n'
//		}
//		for (String line : fileLines){
//			str += line + "\n" 
//			if(line.contains('name="Thread" timeBudgetUnit="ms">'))
//                  	str += content
//                  
//		}
//
//		val writer = new FileWriter(file)
//		writer.write(str)
//		writer.flush
//		writer.close
//		fsa.generateFile('capellatest.xml', str)
//	}
	
	override doGenerate(ResourceSet input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var str = ""
		var model = input.allContents.head as TAC
//		var model = resource.
		var content =""
		for (FunctionDef function : model.functionDef){
			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'">\n'
			for(Instruction inst: function.codeBlock.instruction){
				if(inst.functionCall !==null)

					content += '\t\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+inst.functionCall.calledFunction.name+'"/>\n'
			}
			content += '\t\t\t\t\t</ownedExtensions>\n'	
//			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'"/>\n'
		}
		for (String line : fileLines){
			str += line + "\n" 
			if(line.contains('name="Thread" timeBudgetUnit="ms">'))
                  	str += content
                  
		}

		val writer = new FileWriter(file)
		writer.write(str)
		writer.flush
		writer.close
		fsa.generateFile('capellatest.xml', str)
	}
	
	
	def compile (Iterable<TAC> entities) '''
    «FOR e : entities»
    	«FOR f : e.functionDef»
    		«f.name.name»
    	«ENDFOR»
    «ENDFOR»
  '''

	
	
	
}
