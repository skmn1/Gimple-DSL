/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.ensma.gimpleDsl.TAC

//import org.example.people.people.Person

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GimpleDslGenerator implements IGimpleGenerator {

    override doGenerate(ResourceSet rs, IFileSystemAccess2 fsa, IGeneratorContext context) {

    		var str = ""
		var model = resource.contents.head as TAC
//		var model = resource.
		var content =""
		for (FunctionDef function : model.functionDef){
			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'">\n'
			for(Instruction inst: function.codeBlock.instruction){
				if(inst.functionCall !==null)

					content += '\t\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+inst.functionCall.calledFunction.name+'"/>\n'
			}
			content += '\t\t\t\t\t</ownedExtensions>\n'	
//			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'"/>\n'
		}
		for (String line : fileLines){
			str += line + "\n" 
			if(line.contains('name="Thread" timeBudgetUnit="ms">'))
                  	str += content
                  
		}

		val writer = new FileWriter(file)
		writer.write(str)
		writer.flush
		writer.close
		fsa.generateFile('capellatest.xml', "")
    }

    override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
    }

    override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
    }

    override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
    }

  	def compile (Iterable<TAC> entities) '''
	    «FOR e : entities»
	    	«FOR f : e.functionDef»
	    		«f.name.name»
	    	«ENDFOR»
	    «ENDFOR»
  	'''

}
	
//	
//
////	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {	
//////		var str = ""
//////		var model = resource.contents.head as TAC
////////		var model = resource.
//////		var content =""
//////		for (FunctionDef function : model.functionDef){
//////			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'">\n'
//////			for(Instruction inst: function.codeBlock.instruction){
//////				if(inst.functionCall !==null)
//////
//////					content += '\t\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+inst.functionCall.calledFunction.name+'"/>\n'
//////			}
//////			content += '\t\t\t\t\t</ownedExtensions>\n'	
////////			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'"/>\n'
//////		}
//////		for (String line : fileLines){
//////			str += line + "\n" 
//////			if(line.contains('name="Thread" timeBudgetUnit="ms">'))
//////                  	str += content
//////                  
//////		}
//////
//////		val writer = new FileWriter(file)
//////		writer.write(str)
//////		writer.flush
//////		writer.close
////		fsa.generateFile('capellatest.xml', "")
////	}
//	
////	override doGenerate(ResourceSet input, IFileSystemAccess2 fsa, IGeneratorContext context) {
////		var str = ""
////		var model = input.allContents.head as TAC
//////		var model = resource.
////		var content =""
////		for (FunctionDef function : model.functionDef){
////			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'">\n'
////			for(Instruction inst: function.codeBlock.instruction){
////				if(inst.functionCall !==null)
////
////					content += '\t\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+inst.functionCall.calledFunction.name+'"/>\n'
////			}
////			content += '\t\t\t\t\t</ownedExtensions>\n'	
//////			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'"/>\n'
////		}
////		for (String line : fileLines){
////			str += line + "\n" 
////			if(line.contains('name="Thread" timeBudgetUnit="ms">'))
////                  	str += content
////                  
////		}
////
////		val writer = new FileWriter(file)
////		writer.write(str)
////		writer.flush
////		writer.close
////		fsa.generateFile('capellatest.xml', str)
////	}
////	
//	
//	def compile (Iterable<TAC> entities) '''
//    «FOR e : entities»
//    	«FOR f : e.functionDef»
//    		«f.name.name»
//    	«ENDFOR»
//    «ENDFOR»
//  '''
//		
//	
//		
//		override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
//				var str = ""
//		var model = input.allContents.head as TAC
////		var model = resource.
//		var content =""
//		for (FunctionDef function : model.functionDef){
//			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'">\n'
//			for(Instruction inst: function.codeBlock.instruction){
//				if(inst.functionCall !==null)
//
//					content += '\t\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+inst.functionCall.calledFunction.name+'"/>\n'
//			}
//			content += '\t\t\t\t\t</ownedExtensions>\n'	
////			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'"/>\n'
//		}
//		for (String line : fileLines){
//			str += line + "\n" 
//			if(line.contains('name="Thread" timeBudgetUnit="ms">'))
//                  	str += content
//                  
//		}
//
//		val writer = new FileWriter(file)
//		writer.write(str)
//		writer.flush
//		writer.close
//		fsa.generateFile('capellatest.xml', str)
//		}
//		
//		override doGenerate(ResourceSet input, IFileSystemAccess2 fsa, IGeneratorContext context) {
//			var str = ""
//			var model = input.allContents.head as TAC
//	//		var model = resource.
//			var content =""
//			for (FunctionDef function : model.functionDef){
//				content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'">\n'
//				for(Instruction inst: function.codeBlock.instruction){
//					if(inst.functionCall !==null)
//	
//						content += '\t\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+inst.functionCall.calledFunction.name+'"/>\n'
//				}
//				content += '\t\t\t\t\t</ownedExtensions>\n'	
//	//			content +=  '\t\t\t\t\t<ownedExtensions xsi:type="deployment:AADLFunction" id="654c1232-49f0-48dc-8f4e-fcb2ef42f336" name="'+function.name.name+'"/>\n'
//			}
//			for (String line : fileLines){
//				str += line + "\n" 
//				if(line.contains('name="Thread" timeBudgetUnit="ms">'))
//	                  	str += content
//	                  
//			}
//	
//			val writer = new FileWriter(file)
//			writer.write(str)
//			writer.flush
//			writer.close
//			fsa.generateFile('capellatest.xml', str)
//		}
//		
//		override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
//			print("aftergen")
////			throw new UnsupportedOperationException("TODO: auto-generated method stub")
//		}
//		
//		override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
//			print("beforergen")
////			throw new UnsupportedOperationException("TODO: auto-generated method stub")
//		}

	
	
	
//}
