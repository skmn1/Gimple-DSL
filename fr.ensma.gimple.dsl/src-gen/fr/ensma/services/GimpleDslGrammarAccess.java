/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GimpleDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TACElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.TAC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionDefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDefFunctionDefParserRuleCall_0_0 = (RuleCall)cFunctionDefAssignment_0.eContents().get(0);
		private final Assignment cCommentLineAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCommentLineCommentLineParserRuleCall_1_0 = (RuleCall)cCommentLineAssignment_1.eContents().get(0);
		
		////
		////Model: packages+=Pack*;
		////Pack: 'package' name=ID '{' functions+=Function* '}';
		////Function: 'function' name = ID '{'(defs+=Def | calls+=Call)*'}';
		////Def: 'def' name=ID;
		////Call: 'call' ref=[Def]; // same as "ref=[Def|ID]"
		////QLFN hidden(WS):ID;
		//////Model :
		//////    model += ExpressionTemporarie
		//////;
		//////
		//////ExpressionTemporarie returns ExpressionTemporarie:
		//////    tempVariableL+=TempVariable '=' (tempVariableR+=TempVariable|ID|INT) '+' (tempVariableR2+=TempVariable|ID|INT) ';'
		//////;
		//////
		//////
		//////TempVariable returns TempVariable:
		//////    name = TempVariablePattern
		//////;
		//////
		//////terminal TempVariablePattern :
		//////    '_'INT
		//////
		//////    ;
		////////SwitchStatment returns SwitchStatment:
		////////    'switch' '(' var = [SwitchLabel|QNSL] ')' ':'
		////////;
		////////
		////////SwitchCase returns SwitchCase:
		////////    'case' INT ':' name=SwitchLabel ';' '[INV]'
		////////;
		////////
		////////SwitchLabelDef returns SwitchLabelDef:
		////////    name = SwitchLabel
		////////;
		////////
		////////SwitchLabel returns SwitchLabel:
		////////    name = QNSL ':'
		////////;
		////////
		////////QNSL:
		////////    '<'ID'>'
		////////;
		////////
		//////
		////
		//////Person hidden(WS, ML_COMMENT, SL_SC_COMMENT):
		//////    name=Fullname age=INT ';';
		//////
		//////Fullname:
		//////    (firstname=ID)? lastname=ID;
		//////
		//////
		//////terminal SL_SC_COMMENT:
		//////    ';;' !('\n'|'\r')* ('\r'? '\n')?;
		//////
		//TAC returns TAC:
		//    (functionDef+=FunctionDef |commentLine+=CommentLine)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(functionDef+=FunctionDef |commentLine+=CommentLine)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//functionDef+=FunctionDef
		public Assignment getFunctionDefAssignment_0() { return cFunctionDefAssignment_0; }
		
		//FunctionDef
		public RuleCall getFunctionDefFunctionDefParserRuleCall_0_0() { return cFunctionDefFunctionDefParserRuleCall_0_0; }
		
		//commentLine+=CommentLine
		public Assignment getCommentLineAssignment_1() { return cCommentLineAssignment_1; }
		
		//CommentLine
		public RuleCall getCommentLineCommentLineParserRuleCall_1_0() { return cCommentLineCommentLineParserRuleCall_1_0; }
	}
	public class FunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.FunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFunctionParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFunctionparamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFunctionparamFunctionParamParserRuleCall_3_0_0 = (RuleCall)cFunctionparamAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCodeBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_6_0 = (RuleCall)cCodeBlockAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FunctionDef returns FunctionDef:
		//    {FunctionDef}
		//    name=Function '(' (functionparam+=FunctionParam','?)* ')' '{'
		//        CodeBlock=CodeBlock
		//     '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDef}
		//name=Function '(' (functionparam+=FunctionParam','?)* ')' '{'
		//    CodeBlock=CodeBlock
		// '}'
		public Group getGroup() { return cGroup; }
		
		//{FunctionDef}
		public Action getFunctionDefAction_0() { return cFunctionDefAction_0; }
		
		//name=Function
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Function
		public RuleCall getNameFunctionParserRuleCall_1_0() { return cNameFunctionParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(functionparam+=FunctionParam','?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//functionparam+=FunctionParam
		public Assignment getFunctionparamAssignment_3_0() { return cFunctionparamAssignment_3_0; }
		
		//FunctionParam
		public RuleCall getFunctionparamFunctionParamParserRuleCall_3_0_0() { return cFunctionparamFunctionParamParserRuleCall_3_0_0; }
		
		//','?
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//CodeBlock=CodeBlock
		public Assignment getCodeBlockAssignment_6() { return cCodeBlockAssignment_6; }
		
		//CodeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_6_0() { return cCodeBlockCodeBlockParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.CodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_1_0 = (RuleCall)cInstructionAssignment_1.eContents().get(0);
		private final Keyword cReturnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CodeBlock returns CodeBlock:
		//        {CodeBlock} instruction+=Instruction*
		//        'return;'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{CodeBlock} instruction+=Instruction*
		//'return;'?
		public Group getGroup() { return cGroup; }
		
		//{CodeBlock}
		public Action getCodeBlockAction_0() { return cCodeBlockAction_0; }
		
		//instruction+=Instruction*
		public Assignment getInstructionAssignment_1() { return cInstructionAssignment_1; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_1_0() { return cInstructionInstructionParserRuleCall_1_0; }
		
		//'return;'?
		public Keyword getReturnKeyword_2() { return cReturnKeyword_2; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVariableDeclarationAssignment_0.eContents().get(0);
		private final Assignment cVaraibleCallAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVaraibleCallVariableCallParserRuleCall_1_0 = (RuleCall)cVaraibleCallAssignment_1.eContents().get(0);
		private final Assignment cConstantDelarationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstantDelarationConstantDelarationParserRuleCall_2_0 = (RuleCall)cConstantDelarationAssignment_2.eContents().get(0);
		private final Assignment cTempVariableAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTempVariableTempVariableParserRuleCall_3_0 = (RuleCall)cTempVariableAssignment_3.eContents().get(0);
		private final Assignment cStructAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStructStructParserRuleCall_4_0 = (RuleCall)cStructAssignment_4.eContents().get(0);
		private final Assignment cLabelDefAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cLabelDefLabelDefParserRuleCall_5_0 = (RuleCall)cLabelDefAssignment_5.eContents().get(0);
		private final Assignment cSwitchLabelDefAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cSwitchLabelDefSwitchLabelDefParserRuleCall_6_0 = (RuleCall)cSwitchLabelDefAssignment_6.eContents().get(0);
		private final Assignment cGotoAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGotoGotoParserRuleCall_7_0 = (RuleCall)cGotoAssignment_7.eContents().get(0);
		private final Assignment cIfAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cIfIfParserRuleCall_8_0 = (RuleCall)cIfAssignment_8.eContents().get(0);
		private final Assignment cExpressionTemporarieAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cExpressionTemporarieExpressionTemporarieParserRuleCall_9_0 = (RuleCall)cExpressionTemporarieAssignment_9.eContents().get(0);
		private final Assignment cSwitchStatementAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cSwitchStatementSwitchStatmentParserRuleCall_10_0 = (RuleCall)cSwitchStatementAssignment_10.eContents().get(0);
		private final Assignment cDebugTagAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cDebugTagDebugTagParserRuleCall_11_0 = (RuleCall)cDebugTagAssignment_11.eContents().get(0);
		private final Assignment cFunctionCallAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cFunctionCallFunctionCallParserRuleCall_12_0 = (RuleCall)cFunctionCallAssignment_12.eContents().get(0);
		private final Assignment cAssignOpAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cAssignOpAssignOperationParserRuleCall_13_0 = (RuleCall)cAssignOpAssignment_13.eContents().get(0);
		
		//Instruction returns Instruction:
		//    variableDeclaration=VariableDeclaration|
		//    varaibleCall=VariableCall|
		//    constantDelaration=ConstantDelaration|
		//    tempVariable=TempVariable|
		//    struct=Struct|
		//    LabelDef=LabelDef|
		//    switchLabelDef=SwitchLabelDef|
		//    goto=Goto|
		//    if=If|
		//    expressionTemporarie=ExpressionTemporarie|
		//    switchStatement=SwitchStatment|
		//    debugTag=DebugTag|
		//    functionCall=FunctionCall|
		//    assignOp=AssignOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variableDeclaration=VariableDeclaration|
		//varaibleCall=VariableCall|
		//constantDelaration=ConstantDelaration|
		//tempVariable=TempVariable|
		//struct=Struct|
		//LabelDef=LabelDef|
		//switchLabelDef=SwitchLabelDef|
		//goto=Goto|
		//if=If|
		//expressionTemporarie=ExpressionTemporarie|
		//switchStatement=SwitchStatment|
		//debugTag=DebugTag|
		//functionCall=FunctionCall|
		//assignOp=AssignOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variableDeclaration=VariableDeclaration
		public Assignment getVariableDeclarationAssignment_0() { return cVariableDeclarationAssignment_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationVariableDeclarationParserRuleCall_0_0() { return cVariableDeclarationVariableDeclarationParserRuleCall_0_0; }
		
		//varaibleCall=VariableCall
		public Assignment getVaraibleCallAssignment_1() { return cVaraibleCallAssignment_1; }
		
		//VariableCall
		public RuleCall getVaraibleCallVariableCallParserRuleCall_1_0() { return cVaraibleCallVariableCallParserRuleCall_1_0; }
		
		//constantDelaration=ConstantDelaration
		public Assignment getConstantDelarationAssignment_2() { return cConstantDelarationAssignment_2; }
		
		//ConstantDelaration
		public RuleCall getConstantDelarationConstantDelarationParserRuleCall_2_0() { return cConstantDelarationConstantDelarationParserRuleCall_2_0; }
		
		//tempVariable=TempVariable
		public Assignment getTempVariableAssignment_3() { return cTempVariableAssignment_3; }
		
		//TempVariable
		public RuleCall getTempVariableTempVariableParserRuleCall_3_0() { return cTempVariableTempVariableParserRuleCall_3_0; }
		
		//struct=Struct
		public Assignment getStructAssignment_4() { return cStructAssignment_4; }
		
		//Struct
		public RuleCall getStructStructParserRuleCall_4_0() { return cStructStructParserRuleCall_4_0; }
		
		//LabelDef=LabelDef
		public Assignment getLabelDefAssignment_5() { return cLabelDefAssignment_5; }
		
		//LabelDef
		public RuleCall getLabelDefLabelDefParserRuleCall_5_0() { return cLabelDefLabelDefParserRuleCall_5_0; }
		
		//switchLabelDef=SwitchLabelDef
		public Assignment getSwitchLabelDefAssignment_6() { return cSwitchLabelDefAssignment_6; }
		
		//SwitchLabelDef
		public RuleCall getSwitchLabelDefSwitchLabelDefParserRuleCall_6_0() { return cSwitchLabelDefSwitchLabelDefParserRuleCall_6_0; }
		
		//goto=Goto
		public Assignment getGotoAssignment_7() { return cGotoAssignment_7; }
		
		//Goto
		public RuleCall getGotoGotoParserRuleCall_7_0() { return cGotoGotoParserRuleCall_7_0; }
		
		//if=If
		public Assignment getIfAssignment_8() { return cIfAssignment_8; }
		
		//If
		public RuleCall getIfIfParserRuleCall_8_0() { return cIfIfParserRuleCall_8_0; }
		
		//expressionTemporarie=ExpressionTemporarie
		public Assignment getExpressionTemporarieAssignment_9() { return cExpressionTemporarieAssignment_9; }
		
		//ExpressionTemporarie
		public RuleCall getExpressionTemporarieExpressionTemporarieParserRuleCall_9_0() { return cExpressionTemporarieExpressionTemporarieParserRuleCall_9_0; }
		
		//switchStatement=SwitchStatment
		public Assignment getSwitchStatementAssignment_10() { return cSwitchStatementAssignment_10; }
		
		//SwitchStatment
		public RuleCall getSwitchStatementSwitchStatmentParserRuleCall_10_0() { return cSwitchStatementSwitchStatmentParserRuleCall_10_0; }
		
		//debugTag=DebugTag
		public Assignment getDebugTagAssignment_11() { return cDebugTagAssignment_11; }
		
		//DebugTag
		public RuleCall getDebugTagDebugTagParserRuleCall_11_0() { return cDebugTagDebugTagParserRuleCall_11_0; }
		
		//functionCall=FunctionCall
		public Assignment getFunctionCallAssignment_12() { return cFunctionCallAssignment_12; }
		
		//FunctionCall
		public RuleCall getFunctionCallFunctionCallParserRuleCall_12_0() { return cFunctionCallFunctionCallParserRuleCall_12_0; }
		
		//assignOp=AssignOperation
		public Assignment getAssignOpAssignment_13() { return cAssignOpAssignment_13; }
		
		//AssignOperation
		public RuleCall getAssignOpAssignOperationParserRuleCall_13_0() { return cAssignOpAssignOperationParserRuleCall_13_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCalledFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCalledFunctionFunctionCrossReference_1_0 = (CrossReference)cCalledFunctionAssignment_1.eContents().get(0);
		private final RuleCall cCalledFunctionFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cCalledFunctionFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFunctionArgumentAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFunctionArgumentFunctionArgumentParserRuleCall_3_0_0 = (RuleCall)cFunctionArgumentAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctionCall returns FunctionCall:
		//    {FunctionCall}
		//    calledFunction=[Function] '(' ( functionArgument+=FunctionArgument','?)* ')' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall}
		//calledFunction=[Function] '(' ( functionArgument+=FunctionArgument','?)* ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//calledFunction=[Function]
		public Assignment getCalledFunctionAssignment_1() { return cCalledFunctionAssignment_1; }
		
		//[Function]
		public CrossReference getCalledFunctionFunctionCrossReference_1_0() { return cCalledFunctionFunctionCrossReference_1_0; }
		
		//ID
		public RuleCall getCalledFunctionFunctionIDTerminalRuleCall_1_0_1() { return cCalledFunctionFunctionIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//( functionArgument+=FunctionArgument','?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//functionArgument+=FunctionArgument
		public Assignment getFunctionArgumentAssignment_3_0() { return cFunctionArgumentAssignment_3_0; }
		
		//FunctionArgument
		public RuleCall getFunctionArgumentFunctionArgumentParserRuleCall_3_0_0() { return cFunctionArgumentFunctionArgumentParserRuleCall_3_0_0; }
		
		//','?
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FunctionParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.FunctionParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunctionParamAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStructKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDatatypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDatatypeDataTypeParserRuleCall_1_0_0 = (RuleCall)cDatatypeAssignment_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//FunctionParam returns FunctionParam:
		//    {FunctionParam}
		//    'struct' ID '*'? ID | (datatype=DataType '*'? name=ID)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionParam}
		//'struct' ID '*'? ID | (datatype=DataType '*'? name=ID)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FunctionParam}
		//'struct' ID '*'? ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{FunctionParam}
		public Action getFunctionParamAction_0_0() { return cFunctionParamAction_0_0; }
		
		//'struct'
		public Keyword getStructKeyword_0_1() { return cStructKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_2() { return cIDTerminalRuleCall_0_2; }
		
		//'*'?
		public Keyword getAsteriskKeyword_0_3() { return cAsteriskKeyword_0_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_4() { return cIDTerminalRuleCall_0_4; }
		
		//(datatype=DataType '*'? name=ID)
		public Group getGroup_1() { return cGroup_1; }
		
		//datatype=DataType
		public Assignment getDatatypeAssignment_1_0() { return cDatatypeAssignment_1_0; }
		
		//DataType
		public RuleCall getDatatypeDataTypeParserRuleCall_1_0_0() { return cDatatypeDataTypeParserRuleCall_1_0_0; }
		
		//'*'?
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
	}
	public class FunctionArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.FunctionArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameArgumentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FunctionArgument returns FunctionArgument:
		//    {FunctionArgument}
		//    name = Argument
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionArgument}
		//name = Argument
		public Group getGroup() { return cGroup; }
		
		//{FunctionArgument}
		public Action getFunctionArgumentAction_0() { return cFunctionArgumentAction_0; }
		
		//name = Argument
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Argument
		public RuleCall getNameArgumentParserRuleCall_1_0() { return cNameArgumentParserRuleCall_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArgumentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cFullStopKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_2_1 = (RuleCall)cGroup_0_1_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArgumentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Argument returns Argument:
		//    {Argument}
		//    ('&'? name = ID ('.' ID)*) | {Argument} INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Argument}
		//('&'? name = ID ('.' ID)*) | {Argument} INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Argument}
		//('&'? name = ID ('.' ID)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//{Argument}
		public Action getArgumentAction_0_0() { return cArgumentAction_0_0; }
		
		//('&'? name = ID ('.' ID)*)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'&'?
		public Keyword getAmpersandKeyword_0_1_0() { return cAmpersandKeyword_0_1_0; }
		
		//name = ID
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_1_0() { return cNameIDTerminalRuleCall_0_1_1_0; }
		
		//('.' ID)*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1_2_0() { return cFullStopKeyword_0_1_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_2_1() { return cIDTerminalRuleCall_0_1_2_1; }
		
		//{Argument} INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{Argument}
		public Action getArgumentAction_1_0() { return cArgumentAction_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class StructVariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.StructVariableCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCalledStructVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCalledStructVariableStructCrossReference_0_0 = (CrossReference)cCalledStructVariableAssignment_0.eContents().get(0);
		private final RuleCall cCalledStructVariableStructIDTerminalRuleCall_0_0_1 = (RuleCall)cCalledStructVariableStructCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StructVariableCall returns StructVariableCall:
		//    calledStructVariable = [Struct] '.' ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//calledStructVariable = [Struct] '.' ID
		public Group getGroup() { return cGroup; }
		
		//calledStructVariable = [Struct]
		public Assignment getCalledStructVariableAssignment_0() { return cCalledStructVariableAssignment_0; }
		
		//[Struct]
		public CrossReference getCalledStructVariableStructCrossReference_0_0() { return cCalledStructVariableStructCrossReference_0_0; }
		
		//ID
		public RuleCall getCalledStructVariableStructIDTerminalRuleCall_0_0_1() { return cCalledStructVariableStructIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class StructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.Struct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnotherAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnotherIDTerminalRuleCall_4_0 = (RuleCall)cAnotherAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Struct returns Struct:
		//    {Struct}
		//    'struct' name=ID '*'? another = ID   ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Struct}
		//'struct' name=ID '*'? another = ID   ';'
		public Group getGroup() { return cGroup; }
		
		//{Struct}
		public Action getStructAction_0() { return cStructAction_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'*'?
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
		
		//another = ID
		public Assignment getAnotherAssignment_4() { return cAnotherAssignment_4; }
		
		//ID
		public RuleCall getAnotherIDTerminalRuleCall_4_0() { return cAnotherIDTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGotoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGotoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGotoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cGotoLabelCrossReference_2_0 = (CrossReference)cGotoAssignment_2.eContents().get(0);
		private final RuleCall cGotoLabelQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cGotoLabelCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cINVKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Goto returns Goto:
		//    {Goto}
		//    'goto' goto = [Label|QualifiedName]  ';' '[INV]'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Goto}
		//'goto' goto = [Label|QualifiedName]  ';' '[INV]'
		public Group getGroup() { return cGroup; }
		
		//{Goto}
		public Action getGotoAction_0() { return cGotoAction_0; }
		
		//'goto'
		public Keyword getGotoKeyword_1() { return cGotoKeyword_1; }
		
		//goto = [Label|QualifiedName]
		public Assignment getGotoAssignment_2() { return cGotoAssignment_2; }
		
		//[Label|QualifiedName]
		public CrossReference getGotoLabelCrossReference_2_0() { return cGotoLabelCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getGotoLabelQualifiedNameParserRuleCall_2_0_1() { return cGotoLabelQualifiedNameParserRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'[INV]'
		public Keyword getINVKeyword_4() { return cINVKeyword_4; }
	}
	public class LabelDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.LabelDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLabelParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//LabelDef returns LabelDef:
		//    {LabelDef}
		//    name = Label
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LabelDef}
		//name = Label
		public Group getGroup() { return cGroup; }
		
		//{LabelDef}
		public Action getLabelDefAction_0() { return cLabelDefAction_0; }
		
		//name = Label
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Label
		public RuleCall getNameLabelParserRuleCall_1_0() { return cNameLabelParserRuleCall_1_0; }
	}
	public class SwitchStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.SwitchStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTempVariableRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTempVariableRefTempVariableCrossReference_2_0 = (CrossReference)cTempVariableRefAssignment_2.eContents().get(0);
		private final RuleCall cTempVariableRefTempVariableTEMP_VARIABLE_PATTERNTerminalRuleCall_2_0_1 = (RuleCall)cTempVariableRefTempVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSwitchDefaultCaseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSwitchDefaultCaseSwitchDefaultCaseParserRuleCall_5_0 = (RuleCall)cSwitchDefaultCaseAssignment_5.eContents().get(0);
		private final Assignment cSwitchCase1Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSwitchCase1SwitchCaseParserRuleCall_6_0 = (RuleCall)cSwitchCase1Assignment_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SwitchStatment returns SwitchStatment:
		//    'switch' '(' tempVariableRef = [TempVariable|TEMP_VARIABLE_PATTERN] ')' '<' switchDefaultCase+=SwitchDefaultCase SwitchCase1+=SwitchCase* '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' '(' tempVariableRef = [TempVariable|TEMP_VARIABLE_PATTERN] ')' '<' switchDefaultCase+=SwitchDefaultCase SwitchCase1+=SwitchCase* '>'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//tempVariableRef = [TempVariable|TEMP_VARIABLE_PATTERN]
		public Assignment getTempVariableRefAssignment_2() { return cTempVariableRefAssignment_2; }
		
		//[TempVariable|TEMP_VARIABLE_PATTERN]
		public CrossReference getTempVariableRefTempVariableCrossReference_2_0() { return cTempVariableRefTempVariableCrossReference_2_0; }
		
		//TEMP_VARIABLE_PATTERN
		public RuleCall getTempVariableRefTempVariableTEMP_VARIABLE_PATTERNTerminalRuleCall_2_0_1() { return cTempVariableRefTempVariableTEMP_VARIABLE_PATTERNTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//switchDefaultCase+=SwitchDefaultCase
		public Assignment getSwitchDefaultCaseAssignment_5() { return cSwitchDefaultCaseAssignment_5; }
		
		//SwitchDefaultCase
		public RuleCall getSwitchDefaultCaseSwitchDefaultCaseParserRuleCall_5_0() { return cSwitchDefaultCaseSwitchDefaultCaseParserRuleCall_5_0; }
		
		//SwitchCase1+=SwitchCase*
		public Assignment getSwitchCase1Assignment_6() { return cSwitchCase1Assignment_6; }
		
		//SwitchCase
		public RuleCall getSwitchCase1SwitchCaseParserRuleCall_6_0() { return cSwitchCase1SwitchCaseParserRuleCall_6_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class SwitchDefaultCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.SwitchDefaultCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDefaultKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSwitchLabelSwitchLabelCrossReference_2_0 = (CrossReference)cSwitchLabelAssignment_2.eContents().get(0);
		private final RuleCall cSwitchLabelSwitchLabelQNSLParserRuleCall_2_0_1 = (RuleCall)cSwitchLabelSwitchLabelCrossReference_2_0.eContents().get(1);
		private final Keyword cINVKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SwitchDefaultCase returns SwitchDefaultCase:
		//    name = 'default' ':'  switchLabel = [SwitchLabel|QNSL]  '[INV]'?','
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = 'default' ':'  switchLabel = [SwitchLabel|QNSL]  '[INV]'?','
		public Group getGroup() { return cGroup; }
		
		//name = 'default'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'default'
		public Keyword getNameDefaultKeyword_0_0() { return cNameDefaultKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//switchLabel = [SwitchLabel|QNSL]
		public Assignment getSwitchLabelAssignment_2() { return cSwitchLabelAssignment_2; }
		
		//[SwitchLabel|QNSL]
		public CrossReference getSwitchLabelSwitchLabelCrossReference_2_0() { return cSwitchLabelSwitchLabelCrossReference_2_0; }
		
		//QNSL
		public RuleCall getSwitchLabelSwitchLabelQNSLParserRuleCall_2_0_1() { return cSwitchLabelSwitchLabelQNSLParserRuleCall_2_0_1; }
		
		//'[INV]'?
		public Keyword getINVKeyword_3() { return cINVKeyword_3; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}
	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameCASE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSwitchLabelSwitchLabelCrossReference_2_0 = (CrossReference)cSwitchLabelAssignment_2.eContents().get(0);
		private final RuleCall cSwitchLabelSwitchLabelQNSLParserRuleCall_2_0_1 = (RuleCall)cSwitchLabelSwitchLabelCrossReference_2_0.eContents().get(1);
		private final Keyword cINVKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SwitchCase returns SwitchCase:
		//    name = CASE_ID ':'  switchLabel = [SwitchLabel|QNSL]  '[INV]'?','?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = CASE_ID ':'  switchLabel = [SwitchLabel|QNSL]  '[INV]'?','?
		public Group getGroup() { return cGroup; }
		
		//name = CASE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//CASE_ID
		public RuleCall getNameCASE_IDTerminalRuleCall_0_0() { return cNameCASE_IDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//switchLabel = [SwitchLabel|QNSL]
		public Assignment getSwitchLabelAssignment_2() { return cSwitchLabelAssignment_2; }
		
		//[SwitchLabel|QNSL]
		public CrossReference getSwitchLabelSwitchLabelCrossReference_2_0() { return cSwitchLabelSwitchLabelCrossReference_2_0; }
		
		//QNSL
		public RuleCall getSwitchLabelSwitchLabelQNSLParserRuleCall_2_0_1() { return cSwitchLabelSwitchLabelQNSLParserRuleCall_2_0_1; }
		
		//'[INV]'?
		public Keyword getINVKeyword_3() { return cINVKeyword_3; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}
	public class SwitchLabelDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.SwitchLabelDef");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSwitchLabelParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SwitchLabelDef returns SwitchLabelDef:
		//    name = SwitchLabel
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = SwitchLabel
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SwitchLabel
		public RuleCall getNameSwitchLabelParserRuleCall_0() { return cNameSwitchLabelParserRuleCall_0; }
	}
	public class SwitchLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.SwitchLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQNSLParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SwitchLabel returns SwitchLabel:
		//    name = QNSL ':'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = QNSL ':'
		public Group getGroup() { return cGroup; }
		
		//name = QNSL
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QNSL
		public RuleCall getNameQNSLParserRuleCall_0_0() { return cNameQNSLParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}
	public class QNSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.QNSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QNSL:
		//    '<'ID'>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<'ID'>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Label returns Label:
		//    {Label}
		//      name = QualifiedName ':'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Label}
		//  name = QualifiedName ':'
		public Group getGroup() { return cGroup; }
		
		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }
		
		//name = QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//QualifiedName :
		// '<' ID INT '>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<' ID INT '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cInstructionAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cInstructionInstructionParserRuleCall_4_0_0 = (RuleCall)cInstructionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cCodeBlockAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_4_1_1_0 = (RuleCall)cCodeBlockAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		
		//If returns If:
		//    'if' '(' BooleanExpression ')'
		//        (instruction += Instruction |
		//    '{'
		//        codeBlock += CodeBlock
		//    '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' BooleanExpression ')'
		//    (instruction += Instruction |
		//'{'
		//    codeBlock += CodeBlock
		//'}')
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_2() { return cBooleanExpressionParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//    (instruction += Instruction |
		//'{'
		//    codeBlock += CodeBlock
		//'}')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//instruction += Instruction
		public Assignment getInstructionAssignment_4_0() { return cInstructionAssignment_4_0; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_4_0_0() { return cInstructionInstructionParserRuleCall_4_0_0; }
		
		//'{'
		//    codeBlock += CodeBlock
		//'}'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }
		
		//codeBlock += CodeBlock
		public Assignment getCodeBlockAssignment_4_1_1() { return cCodeBlockAssignment_4_1_1; }
		
		//CodeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_4_1_1_0() { return cCodeBlockCodeBlockParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_2() { return cRightCurlyBracketKeyword_4_1_2; }
	}
	public class AssignOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.AssignOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameVariableCallParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameTempVariableParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cNameStructVariableCallParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCastAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCastCastParserRuleCall_3_0 = (RuleCall)cCastAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Alternatives cAlternatives_4_0_0 = (Alternatives)cGroup_4_0.eContents().get(0);
		private final Assignment cVcallAssignment_4_0_0_0 = (Assignment)cAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cVcallVariableCallParserRuleCall_4_0_0_0_0 = (RuleCall)cVcallAssignment_4_0_0_0.eContents().get(0);
		private final Assignment cTempVariableAssignment_4_0_0_1 = (Assignment)cAlternatives_4_0_0.eContents().get(1);
		private final RuleCall cTempVariableTempVariableParserRuleCall_4_0_0_1_0 = (RuleCall)cTempVariableAssignment_4_0_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4_0_0_2 = (RuleCall)cAlternatives_4_0_0.eContents().get(2);
		private final Group cGroup_4_0_0_3 = (Group)cAlternatives_4_0_0.eContents().get(3);
		private final Keyword cAmpersandKeyword_4_0_0_3_0 = (Keyword)cGroup_4_0_0_3.eContents().get(0);
		private final Keyword cCLOBBERKeyword_4_0_0_3_1 = (Keyword)cGroup_4_0_0_3.eContents().get(1);
		private final Assignment cFunctionCallAssignment_4_0_0_4 = (Assignment)cAlternatives_4_0_0.eContents().get(4);
		private final RuleCall cFunctionCallFunctionCallParserRuleCall_4_0_0_4_0 = (RuleCall)cFunctionCallAssignment_4_0_0_4.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_0_1_1 = (RuleCall)cGroup_4_0_1.eContents().get(1);
		private final Assignment cArithmeticOperationAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cArithmeticOperationArithmeticOperationParserRuleCall_4_1_0 = (RuleCall)cArithmeticOperationAssignment_4_1.eContents().get(0);
		private final Assignment cBinaryOperationAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cBinaryOperationBinaryOperationParserRuleCall_4_2_0 = (RuleCall)cBinaryOperationAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AssignOperation returns AssignOperation:
		//    {AssignOperation}
		//     (name =VariableCall |name = TempVariable |name =StructVariableCall)  '=' cast?=Cast? ((
		//                                                                vcall+=VariableCall/* ))/* */
		//                                                                |tempVariable+=TempVariable|
		//                                                                 INT| '&'
		//                                                                '{CLOBBER}'|functionCall+=FunctionCall )
		//                                                                (('->' ID))  | arithmeticOperation+=ArithmeticOperation | binaryOperation+=BinaryOperation)*/**/ ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssignOperation}
		// (name =VariableCall |name = TempVariable |name =StructVariableCall)  '=' cast?=Cast? ((
		//                                                            vcall+=VariableCall/* ))/* */
		//                                                            |tempVariable+=TempVariable|
		//                                                             INT| '&'
		//                                                            '{CLOBBER}'|functionCall+=FunctionCall )
		//                                                            (('->' ID))  | arithmeticOperation+=ArithmeticOperation | binaryOperation+=BinaryOperation)*/**/ ';'
		public Group getGroup() { return cGroup; }
		
		//{AssignOperation}
		public Action getAssignOperationAction_0() { return cAssignOperationAction_0; }
		
		//(name =VariableCall |name = TempVariable |name =StructVariableCall)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name =VariableCall
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//VariableCall
		public RuleCall getNameVariableCallParserRuleCall_1_0_0() { return cNameVariableCallParserRuleCall_1_0_0; }
		
		//name = TempVariable
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//TempVariable
		public RuleCall getNameTempVariableParserRuleCall_1_1_0() { return cNameTempVariableParserRuleCall_1_1_0; }
		
		//name =StructVariableCall
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//StructVariableCall
		public RuleCall getNameStructVariableCallParserRuleCall_1_2_0() { return cNameStructVariableCallParserRuleCall_1_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//cast?=Cast?
		public Assignment getCastAssignment_3() { return cCastAssignment_3; }
		
		//Cast
		public RuleCall getCastCastParserRuleCall_3_0() { return cCastCastParserRuleCall_3_0; }
		
		//((
		//                                                               vcall+=VariableCall/* ))/* */
		//                                                               |tempVariable+=TempVariable|
		//                                                                INT| '&'
		//                                                               '{CLOBBER}'|functionCall+=FunctionCall )
		//                                                               (('->' ID))  | arithmeticOperation+=ArithmeticOperation | binaryOperation+=BinaryOperation)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(
		//                                                                vcall+=VariableCall/* ))/* */
		//                                                                |tempVariable+=TempVariable|
		//                                                                 INT| '&'
		//                                                                '{CLOBBER}'|functionCall+=FunctionCall )
		//                                                                (('->' ID))
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//(
		//                                                                vcall+=VariableCall/* ))/* */
		//                                                                |tempVariable+=TempVariable|
		//                                                                 INT| '&'
		//                                                                '{CLOBBER}'|functionCall+=FunctionCall )
		public Alternatives getAlternatives_4_0_0() { return cAlternatives_4_0_0; }
		
		//vcall+=VariableCall
		public Assignment getVcallAssignment_4_0_0_0() { return cVcallAssignment_4_0_0_0; }
		
		//VariableCall
		public RuleCall getVcallVariableCallParserRuleCall_4_0_0_0_0() { return cVcallVariableCallParserRuleCall_4_0_0_0_0; }
		
		//tempVariable+=TempVariable
		public Assignment getTempVariableAssignment_4_0_0_1() { return cTempVariableAssignment_4_0_0_1; }
		
		//TempVariable
		public RuleCall getTempVariableTempVariableParserRuleCall_4_0_0_1_0() { return cTempVariableTempVariableParserRuleCall_4_0_0_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_0_0_2() { return cINTTerminalRuleCall_4_0_0_2; }
		
		//'&'
		//                                                               '{CLOBBER}'
		public Group getGroup_4_0_0_3() { return cGroup_4_0_0_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_4_0_0_3_0() { return cAmpersandKeyword_4_0_0_3_0; }
		
		//'{CLOBBER}'
		public Keyword getCLOBBERKeyword_4_0_0_3_1() { return cCLOBBERKeyword_4_0_0_3_1; }
		
		//functionCall+=FunctionCall
		public Assignment getFunctionCallAssignment_4_0_0_4() { return cFunctionCallAssignment_4_0_0_4; }
		
		//FunctionCall
		public RuleCall getFunctionCallFunctionCallParserRuleCall_4_0_0_4_0() { return cFunctionCallFunctionCallParserRuleCall_4_0_0_4_0; }
		
		//(('->' ID))
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0_1_0() { return cHyphenMinusGreaterThanSignKeyword_4_0_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4_0_1_1() { return cIDTerminalRuleCall_4_0_1_1; }
		
		//arithmeticOperation+=ArithmeticOperation
		public Assignment getArithmeticOperationAssignment_4_1() { return cArithmeticOperationAssignment_4_1; }
		
		//ArithmeticOperation
		public RuleCall getArithmeticOperationArithmeticOperationParserRuleCall_4_1_0() { return cArithmeticOperationArithmeticOperationParserRuleCall_4_1_0; }
		
		//binaryOperation+=BinaryOperation
		public Assignment getBinaryOperationAssignment_4_2() { return cBinaryOperationAssignment_4_2; }
		
		//BinaryOperation
		public RuleCall getBinaryOperationBinaryOperationParserRuleCall_4_2_0() { return cBinaryOperationBinaryOperationParserRuleCall_4_2_0; }
		
		///**/ ';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConstantDelarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.ConstantDelaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLocalVariableParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ConstantDelaration returns Declaration:
		//    'const' name = LocalVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'const' name = LocalVariable
		public Group getGroup() { return cGroup; }
		
		//'const'
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//name = LocalVariable
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LocalVariable
		public RuleCall getNameLocalVariableParserRuleCall_1_0() { return cNameLocalVariableParserRuleCall_1_0; }
	}
	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.VariableCall");
		private final Assignment cCalledVaraibleAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cCalledVaraibleLocalVariableCrossReference_0 = (CrossReference)cCalledVaraibleAssignment.eContents().get(0);
		private final RuleCall cCalledVaraibleLocalVariableIDTerminalRuleCall_0_1 = (RuleCall)cCalledVaraibleLocalVariableCrossReference_0.eContents().get(1);
		
		//VariableCall:
		//    calledVaraible=[LocalVariable]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//calledVaraible=[LocalVariable]
		public Assignment getCalledVaraibleAssignment() { return cCalledVaraibleAssignment; }
		
		//[LocalVariable]
		public CrossReference getCalledVaraibleLocalVariableCrossReference_0() { return cCalledVaraibleLocalVariableCrossReference_0; }
		
		//ID
		public RuleCall getCalledVaraibleLocalVariableIDTerminalRuleCall_0_1() { return cCalledVaraibleLocalVariableIDTerminalRuleCall_0_1; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLocalVariableParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VariableDeclaration returns VariableDeclaration :
		//    type=DataType name = LocalVariable';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=DataType name = LocalVariable';'
		public Group getGroup() { return cGroup; }
		
		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }
		
		//name = LocalVariable
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LocalVariable
		public RuleCall getNameLocalVariableParserRuleCall_1_0() { return cNameLocalVariableParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ExpressionTemporarieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.ExpressionTemporarie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTempVariableLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTempVariableLTempVariableParserRuleCall_0_0 = (RuleCall)cTempVariableLAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTempVariableR1Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTempVariableR1TempVariableParserRuleCall_2_0_0 = (RuleCall)cTempVariableR1Assignment_2_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArithmeticOperationAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArithmeticOperationArithmeticOperationParserRuleCall_3_0_0 = (RuleCall)cArithmeticOperationAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cTempVariableR2Assignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cTempVariableR2TempVariableParserRuleCall_3_1_0_0 = (RuleCall)cTempVariableR2Assignment_3_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1_1 = (RuleCall)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_1_2 = (RuleCall)cAlternatives_3_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExpressionTemporarie returns ExpressionTemporarie:
		//    tempVariableL+=TempVariable '=' (tempVariableR1+=TempVariable|ID|INT) (arithmeticOperation+=ArithmeticOperation (tempVariableR2+=TempVariable|ID|INT))* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tempVariableL+=TempVariable '=' (tempVariableR1+=TempVariable|ID|INT) (arithmeticOperation+=ArithmeticOperation (tempVariableR2+=TempVariable|ID|INT))* ';'
		public Group getGroup() { return cGroup; }
		
		//tempVariableL+=TempVariable
		public Assignment getTempVariableLAssignment_0() { return cTempVariableLAssignment_0; }
		
		//TempVariable
		public RuleCall getTempVariableLTempVariableParserRuleCall_0_0() { return cTempVariableLTempVariableParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(tempVariableR1+=TempVariable|ID|INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//tempVariableR1+=TempVariable
		public Assignment getTempVariableR1Assignment_2_0() { return cTempVariableR1Assignment_2_0; }
		
		//TempVariable
		public RuleCall getTempVariableR1TempVariableParserRuleCall_2_0_0() { return cTempVariableR1TempVariableParserRuleCall_2_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2() { return cINTTerminalRuleCall_2_2; }
		
		//(arithmeticOperation+=ArithmeticOperation (tempVariableR2+=TempVariable|ID|INT))*
		public Group getGroup_3() { return cGroup_3; }
		
		//arithmeticOperation+=ArithmeticOperation
		public Assignment getArithmeticOperationAssignment_3_0() { return cArithmeticOperationAssignment_3_0; }
		
		//ArithmeticOperation
		public RuleCall getArithmeticOperationArithmeticOperationParserRuleCall_3_0_0() { return cArithmeticOperationArithmeticOperationParserRuleCall_3_0_0; }
		
		//(tempVariableR2+=TempVariable|ID|INT)
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//tempVariableR2+=TempVariable
		public Assignment getTempVariableR2Assignment_3_1_0() { return cTempVariableR2Assignment_3_1_0; }
		
		//TempVariable
		public RuleCall getTempVariableR2TempVariableParserRuleCall_3_1_0_0() { return cTempVariableR2TempVariableParserRuleCall_3_1_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_1_1() { return cIDTerminalRuleCall_3_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_1_2() { return cINTTerminalRuleCall_3_1_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TempVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.TempVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTEMP_VARIABLE_PATTERNTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TempVariable returns TempVariable:
		//    name = TEMP_VARIABLE_PATTERN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = TEMP_VARIABLE_PATTERN
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//TEMP_VARIABLE_PATTERN
		public RuleCall getNameTEMP_VARIABLE_PATTERNTerminalRuleCall_0() { return cNameTEMP_VARIABLE_PATTERNTerminalRuleCall_0; }
	}
	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.LocalVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameVARIABLE_INDENTIFIERParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//LocalVariable returns LocalVariable:
		//    name = VARIABLE_INDENTIFIER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = VARIABLE_INDENTIFIER
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//VARIABLE_INDENTIFIER
		public RuleCall getNameVARIABLE_INDENTIFIERParserRuleCall_0() { return cNameVARIABLE_INDENTIFIERParserRuleCall_0; }
	}
	public class VARIABLE_INDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.VARIABLE_INDENTIFIER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword c_Keyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//VARIABLE_INDENTIFIER:
		//     ID  ('_' (ID|INT))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID  ('_' (ID|INT))*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('_' (ID|INT))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'_'
		public Keyword get_Keyword_1_0() { return c_Keyword_1_0; }
		
		//(ID|INT)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0() { return cIDTerminalRuleCall_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Function returns Function:
		//    {Function}
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Function}
		//name=ID
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DebugTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.DebugTag");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameDEBUG_BEGINTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DebugTag returns DebugTag:
		//    name = DEBUG_BEGIN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = DEBUG_BEGIN
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//DEBUG_BEGIN
		public RuleCall getNameDEBUG_BEGINTerminalRuleCall_0() { return cNameDEBUG_BEGINTerminalRuleCall_0; }
	}
	public class CommentLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.CommentLine");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSL_SC_COMMENTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CommentLine returns CommentLine:
		//    name=SL_SC_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SL_SC_COMMENT
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SL_SC_COMMENT
		public RuleCall getNameSL_SC_COMMENTTerminalRuleCall_0() { return cNameSL_SC_COMMENTTerminalRuleCall_0; }
	}
	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSignedKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cUnsignedKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Cast returns Cast:
		//    '(' 'short'?  ('signed' |'unsigned')? DataType ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'short'?  ('signed' |'unsigned')? DataType ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'short'?
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }
		
		//('signed' |'unsigned')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'signed'
		public Keyword getSignedKeyword_2_0() { return cSignedKeyword_2_0; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_2_1() { return cUnsignedKeyword_2_1; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_3() { return cDataTypeParserRuleCall_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameFloatKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameIntKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameUint8_tKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameInt16_tKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final Keyword cNameCharKeyword_1_0_4 = (Keyword)cNameAlternatives_1_0.eContents().get(4);
		
		//DataType returns DataType:
		//    {DataType}
		//    name = ('float'| 'int' | 'uint8_t'|'int16_t' | 'char')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DataType}
		//name = ('float'| 'int' | 'uint8_t'|'int16_t' | 'char')
		public Group getGroup() { return cGroup; }
		
		//{DataType}
		public Action getDataTypeAction_0() { return cDataTypeAction_0; }
		
		//name = ('float'| 'int' | 'uint8_t'|'int16_t' | 'char')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//('float'| 'int' | 'uint8_t'|'int16_t' | 'char')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//'float'
		public Keyword getNameFloatKeyword_1_0_0() { return cNameFloatKeyword_1_0_0; }
		
		//'int'
		public Keyword getNameIntKeyword_1_0_1() { return cNameIntKeyword_1_0_1; }
		
		//'uint8_t'
		public Keyword getNameUint8_tKeyword_1_0_2() { return cNameUint8_tKeyword_1_0_2; }
		
		//'int16_t'
		public Keyword getNameInt16_tKeyword_1_0_3() { return cNameInt16_tKeyword_1_0_3; }
		
		//'char'
		public Keyword getNameCharKeyword_1_0_4() { return cNameCharKeyword_1_0_4; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLogicalOperationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//BooleanExpression returns BouleanExrpession:
		//    ID LogicalOperation INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID LogicalOperation INT
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//LogicalOperation
		public RuleCall getLogicalOperationParserRuleCall_1() { return cLogicalOperationParserRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ArithmeticOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.ArithmeticOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArithmeticOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArithmeticOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cArithmeticOperationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cArithmeticOperationAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSolidusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//ArithmeticOperation returns ArithmeticOperation:
		//    {ArithmeticOperation} '+' | {ArithmeticOperation} '-' | {ArithmeticOperation} '*' | {ArithmeticOperation} '/' ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArithmeticOperation} '+' | {ArithmeticOperation} '-' | {ArithmeticOperation} '*' | {ArithmeticOperation} '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ArithmeticOperation} '+'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ArithmeticOperation}
		public Action getArithmeticOperationAction_0_0() { return cArithmeticOperationAction_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//{ArithmeticOperation} '-'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticOperation}
		public Action getArithmeticOperationAction_1_0() { return cArithmeticOperationAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//{ArithmeticOperation} '*'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ArithmeticOperation}
		public Action getArithmeticOperationAction_2_0() { return cArithmeticOperationAction_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }
		
		//{ArithmeticOperation} '/'
		public Group getGroup_3() { return cGroup_3; }
		
		//{ArithmeticOperation}
		public Action getArithmeticOperationAction_3_0() { return cArithmeticOperationAction_3_0; }
		
		//'/'
		public Keyword getSolidusKeyword_3_1() { return cSolidusKeyword_3_1; }
	}
	public class BinaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.BinaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBinaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBinaryOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BinaryOperation returns BinaryOperation:
		//    {BinaryOperation} '&' | {BinaryOperation} '|'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BinaryOperation} '&' | {BinaryOperation} '|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BinaryOperation} '&'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BinaryOperation}
		public Action getBinaryOperationAction_0_0() { return cBinaryOperationAction_0_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_0_1() { return cAmpersandKeyword_0_1; }
		
		//{BinaryOperation} '|'
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation}
		public Action getBinaryOperationAction_1_0() { return cBinaryOperationAction_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
	}
	public class LogicalOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.LogicalOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLogicalOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAndKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLogicalOperationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignLessThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLogicalOperationAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLogicalOperationAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cLogicalOperationAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cLogicalOperationAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cLogicalOperationAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//LogicalOperation returns LogicalOperation:
		//    {LogicalOperation} 'and' | {LogicalOperation} 'or' | {LogicalOperation} '=<' | {LogicalOperation} '<' | {LogicalOperation} '>' | {LogicalOperation} '=>' | {LogicalOperation} '==' | {LogicalOperation} '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalOperation} 'and' | {LogicalOperation} 'or' | {LogicalOperation} '=<' | {LogicalOperation} '<' | {LogicalOperation} '>' | {LogicalOperation} '=>' | {LogicalOperation} '==' | {LogicalOperation} '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LogicalOperation} 'and'
		public Group getGroup_0() { return cGroup_0; }
		
		//{LogicalOperation}
		public Action getLogicalOperationAction_0_0() { return cLogicalOperationAction_0_0; }
		
		//'and'
		public Keyword getAndKeyword_0_1() { return cAndKeyword_0_1; }
		
		//{LogicalOperation} 'or'
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalOperation}
		public Action getLogicalOperationAction_1_0() { return cLogicalOperationAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//{LogicalOperation} '=<'
		public Group getGroup_2() { return cGroup_2; }
		
		//{LogicalOperation}
		public Action getLogicalOperationAction_2_0() { return cLogicalOperationAction_2_0; }
		
		//'=<'
		public Keyword getEqualsSignLessThanSignKeyword_2_1() { return cEqualsSignLessThanSignKeyword_2_1; }
		
		//{LogicalOperation} '<'
		public Group getGroup_3() { return cGroup_3; }
		
		//{LogicalOperation}
		public Action getLogicalOperationAction_3_0() { return cLogicalOperationAction_3_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_1() { return cLessThanSignKeyword_3_1; }
		
		//{LogicalOperation} '>'
		public Group getGroup_4() { return cGroup_4; }
		
		//{LogicalOperation}
		public Action getLogicalOperationAction_4_0() { return cLogicalOperationAction_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_1() { return cGreaterThanSignKeyword_4_1; }
		
		//{LogicalOperation} '=>'
		public Group getGroup_5() { return cGroup_5; }
		
		//{LogicalOperation}
		public Action getLogicalOperationAction_5_0() { return cLogicalOperationAction_5_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5_1() { return cEqualsSignGreaterThanSignKeyword_5_1; }
		
		//{LogicalOperation} '=='
		public Group getGroup_6() { return cGroup_6; }
		
		//{LogicalOperation}
		public Action getLogicalOperationAction_6_0() { return cLogicalOperationAction_6_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_6_1() { return cEqualsSignEqualsSignKeyword_6_1; }
		
		//{LogicalOperation} '!='
		public Group getGroup_7() { return cGroup_7; }
		
		//{LogicalOperation}
		public Action getLogicalOperationAction_7_0() { return cLogicalOperationAction_7_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_7_1() { return cExclamationMarkEqualsSignKeyword_7_1; }
	}
	
	
	private final TACElements pTAC;
	private final FunctionDefElements pFunctionDef;
	private final CodeBlockElements pCodeBlock;
	private final InstructionElements pInstruction;
	private final FunctionCallElements pFunctionCall;
	private final FunctionParamElements pFunctionParam;
	private final FunctionArgumentElements pFunctionArgument;
	private final ArgumentElements pArgument;
	private final StructVariableCallElements pStructVariableCall;
	private final StructElements pStruct;
	private final GotoElements pGoto;
	private final LabelDefElements pLabelDef;
	private final SwitchStatmentElements pSwitchStatment;
	private final SwitchDefaultCaseElements pSwitchDefaultCase;
	private final SwitchCaseElements pSwitchCase;
	private final TerminalRule tCASE_ID;
	private final SwitchLabelDefElements pSwitchLabelDef;
	private final SwitchLabelElements pSwitchLabel;
	private final QNSLElements pQNSL;
	private final LabelElements pLabel;
	private final QualifiedNameElements pQualifiedName;
	private final IfElements pIf;
	private final AssignOperationElements pAssignOperation;
	private final ConstantDelarationElements pConstantDelaration;
	private final VariableCallElements pVariableCall;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ExpressionTemporarieElements pExpressionTemporarie;
	private final TempVariableElements pTempVariable;
	private final TerminalRule tTEMP_VARIABLE_PATTERN;
	private final LocalVariableElements pLocalVariable;
	private final VARIABLE_INDENTIFIERElements pVARIABLE_INDENTIFIER;
	private final FunctionElements pFunction;
	private final DebugTagElements pDebugTag;
	private final TerminalRule tDEBUG_BEGIN;
	private final CommentLineElements pCommentLine;
	private final TerminalRule tSL_SC_COMMENT;
	private final CastElements pCast;
	private final DataTypeElements pDataType;
	private final BooleanExpressionElements pBooleanExpression;
	private final ArithmeticOperationElements pArithmeticOperation;
	private final BinaryOperationElements pBinaryOperation;
	private final LogicalOperationElements pLogicalOperation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GimpleDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTAC = new TACElements();
		this.pFunctionDef = new FunctionDefElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pInstruction = new InstructionElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pFunctionParam = new FunctionParamElements();
		this.pFunctionArgument = new FunctionArgumentElements();
		this.pArgument = new ArgumentElements();
		this.pStructVariableCall = new StructVariableCallElements();
		this.pStruct = new StructElements();
		this.pGoto = new GotoElements();
		this.pLabelDef = new LabelDefElements();
		this.pSwitchStatment = new SwitchStatmentElements();
		this.pSwitchDefaultCase = new SwitchDefaultCaseElements();
		this.pSwitchCase = new SwitchCaseElements();
		this.tCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.CASE_ID");
		this.pSwitchLabelDef = new SwitchLabelDefElements();
		this.pSwitchLabel = new SwitchLabelElements();
		this.pQNSL = new QNSLElements();
		this.pLabel = new LabelElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pIf = new IfElements();
		this.pAssignOperation = new AssignOperationElements();
		this.pConstantDelaration = new ConstantDelarationElements();
		this.pVariableCall = new VariableCallElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pExpressionTemporarie = new ExpressionTemporarieElements();
		this.pTempVariable = new TempVariableElements();
		this.tTEMP_VARIABLE_PATTERN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.TEMP_VARIABLE_PATTERN");
		this.pLocalVariable = new LocalVariableElements();
		this.pVARIABLE_INDENTIFIER = new VARIABLE_INDENTIFIERElements();
		this.pFunction = new FunctionElements();
		this.pDebugTag = new DebugTagElements();
		this.tDEBUG_BEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.DEBUG_BEGIN");
		this.pCommentLine = new CommentLineElements();
		this.tSL_SC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.GimpleDsl.SL_SC_COMMENT");
		this.pCast = new CastElements();
		this.pDataType = new DataTypeElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pArithmeticOperation = new ArithmeticOperationElements();
		this.pBinaryOperation = new BinaryOperationElements();
		this.pLogicalOperation = new LogicalOperationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.ensma.GimpleDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////
	////Model: packages+=Pack*;
	////Pack: 'package' name=ID '{' functions+=Function* '}';
	////Function: 'function' name = ID '{'(defs+=Def | calls+=Call)*'}';
	////Def: 'def' name=ID;
	////Call: 'call' ref=[Def]; // same as "ref=[Def|ID]"
	////QLFN hidden(WS):ID;
	//////Model :
	//////    model += ExpressionTemporarie
	//////;
	//////
	//////ExpressionTemporarie returns ExpressionTemporarie:
	//////    tempVariableL+=TempVariable '=' (tempVariableR+=TempVariable|ID|INT) '+' (tempVariableR2+=TempVariable|ID|INT) ';'
	//////;
	//////
	//////
	//////TempVariable returns TempVariable:
	//////    name = TempVariablePattern
	//////;
	//////
	//////terminal TempVariablePattern :
	//////    '_'INT
	//////
	//////    ;
	////////SwitchStatment returns SwitchStatment:
	////////    'switch' '(' var = [SwitchLabel|QNSL] ')' ':'
	////////;
	////////
	////////SwitchCase returns SwitchCase:
	////////    'case' INT ':' name=SwitchLabel ';' '[INV]'
	////////;
	////////
	////////SwitchLabelDef returns SwitchLabelDef:
	////////    name = SwitchLabel
	////////;
	////////
	////////SwitchLabel returns SwitchLabel:
	////////    name = QNSL ':'
	////////;
	////////
	////////QNSL:
	////////    '<'ID'>'
	////////;
	////////
	//////
	////
	//////Person hidden(WS, ML_COMMENT, SL_SC_COMMENT):
	//////    name=Fullname age=INT ';';
	//////
	//////Fullname:
	//////    (firstname=ID)? lastname=ID;
	//////
	//////
	//////terminal SL_SC_COMMENT:
	//////    ';;' !('\n'|'\r')* ('\r'? '\n')?;
	//////
	//TAC returns TAC:
	//    (functionDef+=FunctionDef |commentLine+=CommentLine)*;
	public TACElements getTACAccess() {
		return pTAC;
	}
	
	public ParserRule getTACRule() {
		return getTACAccess().getRule();
	}
	
	//FunctionDef returns FunctionDef:
	//    {FunctionDef}
	//    name=Function '(' (functionparam+=FunctionParam','?)* ')' '{'
	//        CodeBlock=CodeBlock
	//     '}'
	//;
	public FunctionDefElements getFunctionDefAccess() {
		return pFunctionDef;
	}
	
	public ParserRule getFunctionDefRule() {
		return getFunctionDefAccess().getRule();
	}
	
	//CodeBlock returns CodeBlock:
	//        {CodeBlock} instruction+=Instruction*
	//        'return;'?
	//;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//Instruction returns Instruction:
	//    variableDeclaration=VariableDeclaration|
	//    varaibleCall=VariableCall|
	//    constantDelaration=ConstantDelaration|
	//    tempVariable=TempVariable|
	//    struct=Struct|
	//    LabelDef=LabelDef|
	//    switchLabelDef=SwitchLabelDef|
	//    goto=Goto|
	//    if=If|
	//    expressionTemporarie=ExpressionTemporarie|
	//    switchStatement=SwitchStatment|
	//    debugTag=DebugTag|
	//    functionCall=FunctionCall|
	//    assignOp=AssignOperation
	//;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//FunctionCall returns FunctionCall:
	//    {FunctionCall}
	//    calledFunction=[Function] '(' ( functionArgument+=FunctionArgument','?)* ')' ';'
	//;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//FunctionParam returns FunctionParam:
	//    {FunctionParam}
	//    'struct' ID '*'? ID | (datatype=DataType '*'? name=ID)
	//;
	public FunctionParamElements getFunctionParamAccess() {
		return pFunctionParam;
	}
	
	public ParserRule getFunctionParamRule() {
		return getFunctionParamAccess().getRule();
	}
	
	//FunctionArgument returns FunctionArgument:
	//    {FunctionArgument}
	//    name = Argument
	//;
	public FunctionArgumentElements getFunctionArgumentAccess() {
		return pFunctionArgument;
	}
	
	public ParserRule getFunctionArgumentRule() {
		return getFunctionArgumentAccess().getRule();
	}
	
	//Argument returns Argument:
	//    {Argument}
	//    ('&'? name = ID ('.' ID)*) | {Argument} INT
	//;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//StructVariableCall returns StructVariableCall:
	//    calledStructVariable = [Struct] '.' ID
	//;
	public StructVariableCallElements getStructVariableCallAccess() {
		return pStructVariableCall;
	}
	
	public ParserRule getStructVariableCallRule() {
		return getStructVariableCallAccess().getRule();
	}
	
	//Struct returns Struct:
	//    {Struct}
	//    'struct' name=ID '*'? another = ID   ';'
	//;
	public StructElements getStructAccess() {
		return pStruct;
	}
	
	public ParserRule getStructRule() {
		return getStructAccess().getRule();
	}
	
	//Goto returns Goto:
	//    {Goto}
	//    'goto' goto = [Label|QualifiedName]  ';' '[INV]'
	//;
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//LabelDef returns LabelDef:
	//    {LabelDef}
	//    name = Label
	//    ;
	public LabelDefElements getLabelDefAccess() {
		return pLabelDef;
	}
	
	public ParserRule getLabelDefRule() {
		return getLabelDefAccess().getRule();
	}
	
	//SwitchStatment returns SwitchStatment:
	//    'switch' '(' tempVariableRef = [TempVariable|TEMP_VARIABLE_PATTERN] ')' '<' switchDefaultCase+=SwitchDefaultCase SwitchCase1+=SwitchCase* '>';
	public SwitchStatmentElements getSwitchStatmentAccess() {
		return pSwitchStatment;
	}
	
	public ParserRule getSwitchStatmentRule() {
		return getSwitchStatmentAccess().getRule();
	}
	
	//SwitchDefaultCase returns SwitchDefaultCase:
	//    name = 'default' ':'  switchLabel = [SwitchLabel|QNSL]  '[INV]'?','
	//;
	public SwitchDefaultCaseElements getSwitchDefaultCaseAccess() {
		return pSwitchDefaultCase;
	}
	
	public ParserRule getSwitchDefaultCaseRule() {
		return getSwitchDefaultCaseAccess().getRule();
	}
	
	//SwitchCase returns SwitchCase:
	//    name = CASE_ID ':'  switchLabel = [SwitchLabel|QNSL]  '[INV]'?','?
	//;
	public SwitchCaseElements getSwitchCaseAccess() {
		return pSwitchCase;
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}
	
	//terminal CASE_ID:
	//    'case ' INT
	//;
	public TerminalRule getCASE_IDRule() {
		return tCASE_ID;
	}
	
	//SwitchLabelDef returns SwitchLabelDef:
	//    name = SwitchLabel
	//;
	public SwitchLabelDefElements getSwitchLabelDefAccess() {
		return pSwitchLabelDef;
	}
	
	public ParserRule getSwitchLabelDefRule() {
		return getSwitchLabelDefAccess().getRule();
	}
	
	//SwitchLabel returns SwitchLabel:
	//    name = QNSL ':'
	//;
	public SwitchLabelElements getSwitchLabelAccess() {
		return pSwitchLabel;
	}
	
	public ParserRule getSwitchLabelRule() {
		return getSwitchLabelAccess().getRule();
	}
	
	//QNSL:
	//    '<'ID'>'
	//;
	public QNSLElements getQNSLAccess() {
		return pQNSL;
	}
	
	public ParserRule getQNSLRule() {
		return getQNSLAccess().getRule();
	}
	
	//Label returns Label:
	//    {Label}
	//      name = QualifiedName ':'
	//    ;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//QualifiedName :
	// '<' ID INT '>'
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//If returns If:
	//    'if' '(' BooleanExpression ')'
	//        (instruction += Instruction |
	//    '{'
	//        codeBlock += CodeBlock
	//    '}')
	//    ;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//AssignOperation returns AssignOperation:
	//    {AssignOperation}
	//     (name =VariableCall |name = TempVariable |name =StructVariableCall)  '=' cast?=Cast? ((
	//                                                                vcall+=VariableCall/* ))/* */
	//                                                                |tempVariable+=TempVariable|
	//                                                                 INT| '&'
	//                                                                '{CLOBBER}'|functionCall+=FunctionCall )
	//                                                                (('->' ID))  | arithmeticOperation+=ArithmeticOperation | binaryOperation+=BinaryOperation)*/**/ ';'
	//;
	public AssignOperationElements getAssignOperationAccess() {
		return pAssignOperation;
	}
	
	public ParserRule getAssignOperationRule() {
		return getAssignOperationAccess().getRule();
	}
	
	//ConstantDelaration returns Declaration:
	//    'const' name = LocalVariable
	//;
	public ConstantDelarationElements getConstantDelarationAccess() {
		return pConstantDelaration;
	}
	
	public ParserRule getConstantDelarationRule() {
		return getConstantDelarationAccess().getRule();
	}
	
	//VariableCall:
	//    calledVaraible=[LocalVariable]
	//;
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}
	
	//VariableDeclaration returns VariableDeclaration :
	//    type=DataType name = LocalVariable';'
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//ExpressionTemporarie returns ExpressionTemporarie:
	//    tempVariableL+=TempVariable '=' (tempVariableR1+=TempVariable|ID|INT) (arithmeticOperation+=ArithmeticOperation (tempVariableR2+=TempVariable|ID|INT))* ';'
	//;
	public ExpressionTemporarieElements getExpressionTemporarieAccess() {
		return pExpressionTemporarie;
	}
	
	public ParserRule getExpressionTemporarieRule() {
		return getExpressionTemporarieAccess().getRule();
	}
	
	//TempVariable returns TempVariable:
	//    name = TEMP_VARIABLE_PATTERN
	//;
	public TempVariableElements getTempVariableAccess() {
		return pTempVariable;
	}
	
	public ParserRule getTempVariableRule() {
		return getTempVariableAccess().getRule();
	}
	
	//terminal TEMP_VARIABLE_PATTERN :
	//    '_'INT
	//;
	public TerminalRule getTEMP_VARIABLE_PATTERNRule() {
		return tTEMP_VARIABLE_PATTERN;
	}
	
	//LocalVariable returns LocalVariable:
	//    name = VARIABLE_INDENTIFIER
	//;
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//VARIABLE_INDENTIFIER:
	//     ID  ('_' (ID|INT))*
	//;
	public VARIABLE_INDENTIFIERElements getVARIABLE_INDENTIFIERAccess() {
		return pVARIABLE_INDENTIFIER;
	}
	
	public ParserRule getVARIABLE_INDENTIFIERRule() {
		return getVARIABLE_INDENTIFIERAccess().getRule();
	}
	
	//Function returns Function:
	//    {Function}
	//    name=ID;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//DebugTag returns DebugTag:
	//    name = DEBUG_BEGIN
	//;
	public DebugTagElements getDebugTagAccess() {
		return pDebugTag;
	}
	
	public ParserRule getDebugTagRule() {
		return getDebugTagAccess().getRule();
	}
	
	//terminal DEBUG_BEGIN:
	//    '# DEBUG BEGIN_STMT'
	//;
	public TerminalRule getDEBUG_BEGINRule() {
		return tDEBUG_BEGIN;
	}
	
	//CommentLine returns CommentLine:
	//    name=SL_SC_COMMENT
	//;
	public CommentLineElements getCommentLineAccess() {
		return pCommentLine;
	}
	
	public ParserRule getCommentLineRule() {
		return getCommentLineAccess().getRule();
	}
	
	//terminal SL_SC_COMMENT:
	//    ';;' !('\n'|'\r')* ('\r'? '\n')?
	//;
	public TerminalRule getSL_SC_COMMENTRule() {
		return tSL_SC_COMMENT;
	}
	
	//Cast returns Cast:
	//    '(' 'short'?  ('signed' |'unsigned')? DataType ')'
	//;
	public CastElements getCastAccess() {
		return pCast;
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}
	
	//DataType returns DataType:
	//    {DataType}
	//    name = ('float'| 'int' | 'uint8_t'|'int16_t' | 'char')
	//;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//BooleanExpression returns BouleanExrpession:
	//    ID LogicalOperation INT;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//ArithmeticOperation returns ArithmeticOperation:
	//    {ArithmeticOperation} '+' | {ArithmeticOperation} '-' | {ArithmeticOperation} '*' | {ArithmeticOperation} '/' ;
	public ArithmeticOperationElements getArithmeticOperationAccess() {
		return pArithmeticOperation;
	}
	
	public ParserRule getArithmeticOperationRule() {
		return getArithmeticOperationAccess().getRule();
	}
	
	//BinaryOperation returns BinaryOperation:
	//    {BinaryOperation} '&' | {BinaryOperation} '|'
	//;
	public BinaryOperationElements getBinaryOperationAccess() {
		return pBinaryOperation;
	}
	
	public ParserRule getBinaryOperationRule() {
		return getBinaryOperationAccess().getRule();
	}
	
	//LogicalOperation returns LogicalOperation:
	//    {LogicalOperation} 'and' | {LogicalOperation} 'or' | {LogicalOperation} '=<' | {LogicalOperation} '<' | {LogicalOperation} '>' | {LogicalOperation} '=>' | {LogicalOperation} '==' | {LogicalOperation} '!=';
	public LogicalOperationElements getLogicalOperationAccess() {
		return pLogicalOperation;
	}
	
	public ParserRule getLogicalOperationRule() {
		return getLogicalOperationAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
