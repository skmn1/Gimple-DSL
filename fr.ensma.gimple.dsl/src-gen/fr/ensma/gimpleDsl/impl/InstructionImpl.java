/**
 * generated by Xtext 2.25.0
 */
package fr.ensma.gimpleDsl.impl;

import fr.ensma.gimpleDsl.AssignOperation;
import fr.ensma.gimpleDsl.DebugTag;
import fr.ensma.gimpleDsl.Declaration;
import fr.ensma.gimpleDsl.ExpressionTemporarie;
import fr.ensma.gimpleDsl.FunctionCall;
import fr.ensma.gimpleDsl.GimpleDslPackage;
import fr.ensma.gimpleDsl.Goto;
import fr.ensma.gimpleDsl.If;
import fr.ensma.gimpleDsl.Instruction;
import fr.ensma.gimpleDsl.LabelDef;
import fr.ensma.gimpleDsl.Struct;
import fr.ensma.gimpleDsl.SwitchLabelDef;
import fr.ensma.gimpleDsl.SwitchStatment;
import fr.ensma.gimpleDsl.TempVariable;
import fr.ensma.gimpleDsl.VariableCall;
import fr.ensma.gimpleDsl.VariableDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Instruction</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getVariableDeclaration <em>Variable Declaration</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getVaraibleCall <em>Varaible Call</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getConstantDelaration <em>Constant Delaration</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getTempVariable <em>Temp Variable</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getStruct <em>Struct</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getLabelDef <em>Label Def</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getSwitchLabelDef <em>Switch Label Def</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getGoto <em>Goto</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getIf <em>If</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getExpressionTemporarie <em>Expression Temporarie</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getSwitchStatement <em>Switch Statement</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getDebugTag <em>Debug Tag</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getFunctionCall <em>Function Call</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.InstructionImpl#getAssignOp <em>Assign Op</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InstructionImpl extends MinimalEObjectImpl.Container implements Instruction
{
  /**
   * The cached value of the '{@link #getVariableDeclaration() <em>Variable Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariableDeclaration()
   * @generated
   * @ordered
   */
  protected VariableDeclaration variableDeclaration;

  /**
   * The cached value of the '{@link #getVaraibleCall() <em>Varaible Call</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVaraibleCall()
   * @generated
   * @ordered
   */
  protected VariableCall varaibleCall;

  /**
   * The cached value of the '{@link #getConstantDelaration() <em>Constant Delaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstantDelaration()
   * @generated
   * @ordered
   */
  protected Declaration constantDelaration;

  /**
   * The cached value of the '{@link #getTempVariable() <em>Temp Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempVariable()
   * @generated
   * @ordered
   */
  protected TempVariable tempVariable;

  /**
   * The cached value of the '{@link #getStruct() <em>Struct</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStruct()
   * @generated
   * @ordered
   */
  protected Struct struct;

  /**
   * The cached value of the '{@link #getLabelDef() <em>Label Def</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelDef()
   * @generated
   * @ordered
   */
  protected LabelDef labelDef;

  /**
   * The cached value of the '{@link #getSwitchLabelDef() <em>Switch Label Def</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitchLabelDef()
   * @generated
   * @ordered
   */
  protected SwitchLabelDef switchLabelDef;

  /**
   * The cached value of the '{@link #getGoto() <em>Goto</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGoto()
   * @generated
   * @ordered
   */
  protected Goto goto_;

  /**
   * The cached value of the '{@link #getIf() <em>If</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf()
   * @generated
   * @ordered
   */
  protected If if_;

  /**
   * The cached value of the '{@link #getExpressionTemporarie() <em>Expression Temporarie</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionTemporarie()
   * @generated
   * @ordered
   */
  protected ExpressionTemporarie expressionTemporarie;

  /**
   * The cached value of the '{@link #getSwitchStatement() <em>Switch Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitchStatement()
   * @generated
   * @ordered
   */
  protected SwitchStatment switchStatement;

  /**
   * The cached value of the '{@link #getDebugTag() <em>Debug Tag</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDebugTag()
   * @generated
   * @ordered
   */
  protected DebugTag debugTag;

  /**
   * The cached value of the '{@link #getFunctionCall() <em>Function Call</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionCall()
   * @generated
   * @ordered
   */
  protected FunctionCall functionCall;

  /**
   * The cached value of the '{@link #getAssignOp() <em>Assign Op</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignOp()
   * @generated
   * @ordered
   */
  protected AssignOperation assignOp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InstructionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GimpleDslPackage.Literals.INSTRUCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration getVariableDeclaration()
  {
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariableDeclaration(VariableDeclaration newVariableDeclaration, NotificationChain msgs)
  {
    VariableDeclaration oldVariableDeclaration = variableDeclaration;
    variableDeclaration = newVariableDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION, oldVariableDeclaration, newVariableDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariableDeclaration(VariableDeclaration newVariableDeclaration)
  {
    if (newVariableDeclaration != variableDeclaration)
    {
      NotificationChain msgs = null;
      if (variableDeclaration != null)
        msgs = ((InternalEObject)variableDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION, null, msgs);
      if (newVariableDeclaration != null)
        msgs = ((InternalEObject)newVariableDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION, null, msgs);
      msgs = basicSetVariableDeclaration(newVariableDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION, newVariableDeclaration, newVariableDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableCall getVaraibleCall()
  {
    return varaibleCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVaraibleCall(VariableCall newVaraibleCall, NotificationChain msgs)
  {
    VariableCall oldVaraibleCall = varaibleCall;
    varaibleCall = newVaraibleCall;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL, oldVaraibleCall, newVaraibleCall);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVaraibleCall(VariableCall newVaraibleCall)
  {
    if (newVaraibleCall != varaibleCall)
    {
      NotificationChain msgs = null;
      if (varaibleCall != null)
        msgs = ((InternalEObject)varaibleCall).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL, null, msgs);
      if (newVaraibleCall != null)
        msgs = ((InternalEObject)newVaraibleCall).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL, null, msgs);
      msgs = basicSetVaraibleCall(newVaraibleCall, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL, newVaraibleCall, newVaraibleCall));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declaration getConstantDelaration()
  {
    return constantDelaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstantDelaration(Declaration newConstantDelaration, NotificationChain msgs)
  {
    Declaration oldConstantDelaration = constantDelaration;
    constantDelaration = newConstantDelaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION, oldConstantDelaration, newConstantDelaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstantDelaration(Declaration newConstantDelaration)
  {
    if (newConstantDelaration != constantDelaration)
    {
      NotificationChain msgs = null;
      if (constantDelaration != null)
        msgs = ((InternalEObject)constantDelaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION, null, msgs);
      if (newConstantDelaration != null)
        msgs = ((InternalEObject)newConstantDelaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION, null, msgs);
      msgs = basicSetConstantDelaration(newConstantDelaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION, newConstantDelaration, newConstantDelaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TempVariable getTempVariable()
  {
    return tempVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTempVariable(TempVariable newTempVariable, NotificationChain msgs)
  {
    TempVariable oldTempVariable = tempVariable;
    tempVariable = newTempVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE, oldTempVariable, newTempVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTempVariable(TempVariable newTempVariable)
  {
    if (newTempVariable != tempVariable)
    {
      NotificationChain msgs = null;
      if (tempVariable != null)
        msgs = ((InternalEObject)tempVariable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE, null, msgs);
      if (newTempVariable != null)
        msgs = ((InternalEObject)newTempVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE, null, msgs);
      msgs = basicSetTempVariable(newTempVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE, newTempVariable, newTempVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Struct getStruct()
  {
    return struct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStruct(Struct newStruct, NotificationChain msgs)
  {
    Struct oldStruct = struct;
    struct = newStruct;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__STRUCT, oldStruct, newStruct);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStruct(Struct newStruct)
  {
    if (newStruct != struct)
    {
      NotificationChain msgs = null;
      if (struct != null)
        msgs = ((InternalEObject)struct).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__STRUCT, null, msgs);
      if (newStruct != null)
        msgs = ((InternalEObject)newStruct).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__STRUCT, null, msgs);
      msgs = basicSetStruct(newStruct, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__STRUCT, newStruct, newStruct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelDef getLabelDef()
  {
    return labelDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabelDef(LabelDef newLabelDef, NotificationChain msgs)
  {
    LabelDef oldLabelDef = labelDef;
    labelDef = newLabelDef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__LABEL_DEF, oldLabelDef, newLabelDef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabelDef(LabelDef newLabelDef)
  {
    if (newLabelDef != labelDef)
    {
      NotificationChain msgs = null;
      if (labelDef != null)
        msgs = ((InternalEObject)labelDef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__LABEL_DEF, null, msgs);
      if (newLabelDef != null)
        msgs = ((InternalEObject)newLabelDef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__LABEL_DEF, null, msgs);
      msgs = basicSetLabelDef(newLabelDef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__LABEL_DEF, newLabelDef, newLabelDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchLabelDef getSwitchLabelDef()
  {
    return switchLabelDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSwitchLabelDef(SwitchLabelDef newSwitchLabelDef, NotificationChain msgs)
  {
    SwitchLabelDef oldSwitchLabelDef = switchLabelDef;
    switchLabelDef = newSwitchLabelDef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF, oldSwitchLabelDef, newSwitchLabelDef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSwitchLabelDef(SwitchLabelDef newSwitchLabelDef)
  {
    if (newSwitchLabelDef != switchLabelDef)
    {
      NotificationChain msgs = null;
      if (switchLabelDef != null)
        msgs = ((InternalEObject)switchLabelDef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF, null, msgs);
      if (newSwitchLabelDef != null)
        msgs = ((InternalEObject)newSwitchLabelDef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF, null, msgs);
      msgs = basicSetSwitchLabelDef(newSwitchLabelDef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF, newSwitchLabelDef, newSwitchLabelDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Goto getGoto()
  {
    return goto_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGoto(Goto newGoto, NotificationChain msgs)
  {
    Goto oldGoto = goto_;
    goto_ = newGoto;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__GOTO, oldGoto, newGoto);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGoto(Goto newGoto)
  {
    if (newGoto != goto_)
    {
      NotificationChain msgs = null;
      if (goto_ != null)
        msgs = ((InternalEObject)goto_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__GOTO, null, msgs);
      if (newGoto != null)
        msgs = ((InternalEObject)newGoto).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__GOTO, null, msgs);
      msgs = basicSetGoto(newGoto, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__GOTO, newGoto, newGoto));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public If getIf()
  {
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIf(If newIf, NotificationChain msgs)
  {
    If oldIf = if_;
    if_ = newIf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__IF, oldIf, newIf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIf(If newIf)
  {
    if (newIf != if_)
    {
      NotificationChain msgs = null;
      if (if_ != null)
        msgs = ((InternalEObject)if_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__IF, null, msgs);
      if (newIf != null)
        msgs = ((InternalEObject)newIf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__IF, null, msgs);
      msgs = basicSetIf(newIf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__IF, newIf, newIf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionTemporarie getExpressionTemporarie()
  {
    return expressionTemporarie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionTemporarie(ExpressionTemporarie newExpressionTemporarie, NotificationChain msgs)
  {
    ExpressionTemporarie oldExpressionTemporarie = expressionTemporarie;
    expressionTemporarie = newExpressionTemporarie;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE, oldExpressionTemporarie, newExpressionTemporarie);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionTemporarie(ExpressionTemporarie newExpressionTemporarie)
  {
    if (newExpressionTemporarie != expressionTemporarie)
    {
      NotificationChain msgs = null;
      if (expressionTemporarie != null)
        msgs = ((InternalEObject)expressionTemporarie).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE, null, msgs);
      if (newExpressionTemporarie != null)
        msgs = ((InternalEObject)newExpressionTemporarie).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE, null, msgs);
      msgs = basicSetExpressionTemporarie(newExpressionTemporarie, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE, newExpressionTemporarie, newExpressionTemporarie));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchStatment getSwitchStatement()
  {
    return switchStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSwitchStatement(SwitchStatment newSwitchStatement, NotificationChain msgs)
  {
    SwitchStatment oldSwitchStatement = switchStatement;
    switchStatement = newSwitchStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT, oldSwitchStatement, newSwitchStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSwitchStatement(SwitchStatment newSwitchStatement)
  {
    if (newSwitchStatement != switchStatement)
    {
      NotificationChain msgs = null;
      if (switchStatement != null)
        msgs = ((InternalEObject)switchStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT, null, msgs);
      if (newSwitchStatement != null)
        msgs = ((InternalEObject)newSwitchStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT, null, msgs);
      msgs = basicSetSwitchStatement(newSwitchStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT, newSwitchStatement, newSwitchStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DebugTag getDebugTag()
  {
    return debugTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDebugTag(DebugTag newDebugTag, NotificationChain msgs)
  {
    DebugTag oldDebugTag = debugTag;
    debugTag = newDebugTag;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__DEBUG_TAG, oldDebugTag, newDebugTag);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDebugTag(DebugTag newDebugTag)
  {
    if (newDebugTag != debugTag)
    {
      NotificationChain msgs = null;
      if (debugTag != null)
        msgs = ((InternalEObject)debugTag).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__DEBUG_TAG, null, msgs);
      if (newDebugTag != null)
        msgs = ((InternalEObject)newDebugTag).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__DEBUG_TAG, null, msgs);
      msgs = basicSetDebugTag(newDebugTag, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__DEBUG_TAG, newDebugTag, newDebugTag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCall getFunctionCall()
  {
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionCall(FunctionCall newFunctionCall, NotificationChain msgs)
  {
    FunctionCall oldFunctionCall = functionCall;
    functionCall = newFunctionCall;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__FUNCTION_CALL, oldFunctionCall, newFunctionCall);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunctionCall(FunctionCall newFunctionCall)
  {
    if (newFunctionCall != functionCall)
    {
      NotificationChain msgs = null;
      if (functionCall != null)
        msgs = ((InternalEObject)functionCall).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__FUNCTION_CALL, null, msgs);
      if (newFunctionCall != null)
        msgs = ((InternalEObject)newFunctionCall).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__FUNCTION_CALL, null, msgs);
      msgs = basicSetFunctionCall(newFunctionCall, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__FUNCTION_CALL, newFunctionCall, newFunctionCall));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignOperation getAssignOp()
  {
    return assignOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssignOp(AssignOperation newAssignOp, NotificationChain msgs)
  {
    AssignOperation oldAssignOp = assignOp;
    assignOp = newAssignOp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__ASSIGN_OP, oldAssignOp, newAssignOp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssignOp(AssignOperation newAssignOp)
  {
    if (newAssignOp != assignOp)
    {
      NotificationChain msgs = null;
      if (assignOp != null)
        msgs = ((InternalEObject)assignOp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__ASSIGN_OP, null, msgs);
      if (newAssignOp != null)
        msgs = ((InternalEObject)newAssignOp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.INSTRUCTION__ASSIGN_OP, null, msgs);
      msgs = basicSetAssignOp(newAssignOp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.INSTRUCTION__ASSIGN_OP, newAssignOp, newAssignOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION:
        return basicSetVariableDeclaration(null, msgs);
      case GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL:
        return basicSetVaraibleCall(null, msgs);
      case GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION:
        return basicSetConstantDelaration(null, msgs);
      case GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE:
        return basicSetTempVariable(null, msgs);
      case GimpleDslPackage.INSTRUCTION__STRUCT:
        return basicSetStruct(null, msgs);
      case GimpleDslPackage.INSTRUCTION__LABEL_DEF:
        return basicSetLabelDef(null, msgs);
      case GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF:
        return basicSetSwitchLabelDef(null, msgs);
      case GimpleDslPackage.INSTRUCTION__GOTO:
        return basicSetGoto(null, msgs);
      case GimpleDslPackage.INSTRUCTION__IF:
        return basicSetIf(null, msgs);
      case GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE:
        return basicSetExpressionTemporarie(null, msgs);
      case GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT:
        return basicSetSwitchStatement(null, msgs);
      case GimpleDslPackage.INSTRUCTION__DEBUG_TAG:
        return basicSetDebugTag(null, msgs);
      case GimpleDslPackage.INSTRUCTION__FUNCTION_CALL:
        return basicSetFunctionCall(null, msgs);
      case GimpleDslPackage.INSTRUCTION__ASSIGN_OP:
        return basicSetAssignOp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION:
        return getVariableDeclaration();
      case GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL:
        return getVaraibleCall();
      case GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION:
        return getConstantDelaration();
      case GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE:
        return getTempVariable();
      case GimpleDslPackage.INSTRUCTION__STRUCT:
        return getStruct();
      case GimpleDslPackage.INSTRUCTION__LABEL_DEF:
        return getLabelDef();
      case GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF:
        return getSwitchLabelDef();
      case GimpleDslPackage.INSTRUCTION__GOTO:
        return getGoto();
      case GimpleDslPackage.INSTRUCTION__IF:
        return getIf();
      case GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE:
        return getExpressionTemporarie();
      case GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT:
        return getSwitchStatement();
      case GimpleDslPackage.INSTRUCTION__DEBUG_TAG:
        return getDebugTag();
      case GimpleDslPackage.INSTRUCTION__FUNCTION_CALL:
        return getFunctionCall();
      case GimpleDslPackage.INSTRUCTION__ASSIGN_OP:
        return getAssignOp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION:
        setVariableDeclaration((VariableDeclaration)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL:
        setVaraibleCall((VariableCall)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION:
        setConstantDelaration((Declaration)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE:
        setTempVariable((TempVariable)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__STRUCT:
        setStruct((Struct)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__LABEL_DEF:
        setLabelDef((LabelDef)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF:
        setSwitchLabelDef((SwitchLabelDef)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__GOTO:
        setGoto((Goto)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__IF:
        setIf((If)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE:
        setExpressionTemporarie((ExpressionTemporarie)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT:
        setSwitchStatement((SwitchStatment)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__DEBUG_TAG:
        setDebugTag((DebugTag)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__FUNCTION_CALL:
        setFunctionCall((FunctionCall)newValue);
        return;
      case GimpleDslPackage.INSTRUCTION__ASSIGN_OP:
        setAssignOp((AssignOperation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION:
        setVariableDeclaration((VariableDeclaration)null);
        return;
      case GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL:
        setVaraibleCall((VariableCall)null);
        return;
      case GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION:
        setConstantDelaration((Declaration)null);
        return;
      case GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE:
        setTempVariable((TempVariable)null);
        return;
      case GimpleDslPackage.INSTRUCTION__STRUCT:
        setStruct((Struct)null);
        return;
      case GimpleDslPackage.INSTRUCTION__LABEL_DEF:
        setLabelDef((LabelDef)null);
        return;
      case GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF:
        setSwitchLabelDef((SwitchLabelDef)null);
        return;
      case GimpleDslPackage.INSTRUCTION__GOTO:
        setGoto((Goto)null);
        return;
      case GimpleDslPackage.INSTRUCTION__IF:
        setIf((If)null);
        return;
      case GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE:
        setExpressionTemporarie((ExpressionTemporarie)null);
        return;
      case GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT:
        setSwitchStatement((SwitchStatment)null);
        return;
      case GimpleDslPackage.INSTRUCTION__DEBUG_TAG:
        setDebugTag((DebugTag)null);
        return;
      case GimpleDslPackage.INSTRUCTION__FUNCTION_CALL:
        setFunctionCall((FunctionCall)null);
        return;
      case GimpleDslPackage.INSTRUCTION__ASSIGN_OP:
        setAssignOp((AssignOperation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.INSTRUCTION__VARIABLE_DECLARATION:
        return variableDeclaration != null;
      case GimpleDslPackage.INSTRUCTION__VARAIBLE_CALL:
        return varaibleCall != null;
      case GimpleDslPackage.INSTRUCTION__CONSTANT_DELARATION:
        return constantDelaration != null;
      case GimpleDslPackage.INSTRUCTION__TEMP_VARIABLE:
        return tempVariable != null;
      case GimpleDslPackage.INSTRUCTION__STRUCT:
        return struct != null;
      case GimpleDslPackage.INSTRUCTION__LABEL_DEF:
        return labelDef != null;
      case GimpleDslPackage.INSTRUCTION__SWITCH_LABEL_DEF:
        return switchLabelDef != null;
      case GimpleDslPackage.INSTRUCTION__GOTO:
        return goto_ != null;
      case GimpleDslPackage.INSTRUCTION__IF:
        return if_ != null;
      case GimpleDslPackage.INSTRUCTION__EXPRESSION_TEMPORARIE:
        return expressionTemporarie != null;
      case GimpleDslPackage.INSTRUCTION__SWITCH_STATEMENT:
        return switchStatement != null;
      case GimpleDslPackage.INSTRUCTION__DEBUG_TAG:
        return debugTag != null;
      case GimpleDslPackage.INSTRUCTION__FUNCTION_CALL:
        return functionCall != null;
      case GimpleDslPackage.INSTRUCTION__ASSIGN_OP:
        return assignOp != null;
    }
    return super.eIsSet(featureID);
  }

} //InstructionImpl
