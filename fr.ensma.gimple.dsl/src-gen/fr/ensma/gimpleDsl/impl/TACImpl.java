/**
 * generated by Xtext 2.25.0
 */
package fr.ensma.gimpleDsl.impl;

import fr.ensma.gimpleDsl.CommentLine;
import fr.ensma.gimpleDsl.FunctionDef;
import fr.ensma.gimpleDsl.GimpleDslPackage;
import fr.ensma.gimpleDsl.TAC;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>TAC</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.ensma.gimpleDsl.impl.TACImpl#getFunctionDef <em>Function Def</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.TACImpl#getCommentLine <em>Comment Line</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TACImpl extends MinimalEObjectImpl.Container implements TAC
{
  /**
   * The cached value of the '{@link #getFunctionDef() <em>Function Def</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionDef()
   * @generated
   * @ordered
   */
  protected EList<FunctionDef> functionDef;

  /**
   * The cached value of the '{@link #getCommentLine() <em>Comment Line</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommentLine()
   * @generated
   * @ordered
   */
  protected EList<CommentLine> commentLine;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TACImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GimpleDslPackage.Literals.TAC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FunctionDef> getFunctionDef()
  {
    if (functionDef == null)
    {
      functionDef = new EObjectContainmentEList<FunctionDef>(FunctionDef.class, this, GimpleDslPackage.TAC__FUNCTION_DEF);
    }
    return functionDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CommentLine> getCommentLine()
  {
    if (commentLine == null)
    {
      commentLine = new EObjectContainmentEList<CommentLine>(CommentLine.class, this, GimpleDslPackage.TAC__COMMENT_LINE);
    }
    return commentLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GimpleDslPackage.TAC__FUNCTION_DEF:
        return ((InternalEList<?>)getFunctionDef()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.TAC__COMMENT_LINE:
        return ((InternalEList<?>)getCommentLine()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GimpleDslPackage.TAC__FUNCTION_DEF:
        return getFunctionDef();
      case GimpleDslPackage.TAC__COMMENT_LINE:
        return getCommentLine();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GimpleDslPackage.TAC__FUNCTION_DEF:
        getFunctionDef().clear();
        getFunctionDef().addAll((Collection<? extends FunctionDef>)newValue);
        return;
      case GimpleDslPackage.TAC__COMMENT_LINE:
        getCommentLine().clear();
        getCommentLine().addAll((Collection<? extends CommentLine>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.TAC__FUNCTION_DEF:
        getFunctionDef().clear();
        return;
      case GimpleDslPackage.TAC__COMMENT_LINE:
        getCommentLine().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.TAC__FUNCTION_DEF:
        return functionDef != null && !functionDef.isEmpty();
      case GimpleDslPackage.TAC__COMMENT_LINE:
        return commentLine != null && !commentLine.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TACImpl
