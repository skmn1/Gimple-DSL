/**
 * generated by Xtext 2.25.0
 */
package fr.ensma.gimpleDsl.impl;

import fr.ensma.gimpleDsl.ArithmeticOperation;
import fr.ensma.gimpleDsl.ExpressionTemporarie;
import fr.ensma.gimpleDsl.GimpleDslPackage;
import fr.ensma.gimpleDsl.TempVariable;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression Temporarie</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.ensma.gimpleDsl.impl.ExpressionTemporarieImpl#getTempVariableL <em>Temp Variable L</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.ExpressionTemporarieImpl#getTempVariableR1 <em>Temp Variable R1</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.ExpressionTemporarieImpl#getArithmeticOperation <em>Arithmetic Operation</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.ExpressionTemporarieImpl#getTempVariableR2 <em>Temp Variable R2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionTemporarieImpl extends MinimalEObjectImpl.Container implements ExpressionTemporarie
{
  /**
   * The cached value of the '{@link #getTempVariableL() <em>Temp Variable L</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempVariableL()
   * @generated
   * @ordered
   */
  protected EList<TempVariable> tempVariableL;

  /**
   * The cached value of the '{@link #getTempVariableR1() <em>Temp Variable R1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempVariableR1()
   * @generated
   * @ordered
   */
  protected EList<TempVariable> tempVariableR1;

  /**
   * The cached value of the '{@link #getArithmeticOperation() <em>Arithmetic Operation</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithmeticOperation()
   * @generated
   * @ordered
   */
  protected EList<ArithmeticOperation> arithmeticOperation;

  /**
   * The cached value of the '{@link #getTempVariableR2() <em>Temp Variable R2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempVariableR2()
   * @generated
   * @ordered
   */
  protected EList<TempVariable> tempVariableR2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionTemporarieImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GimpleDslPackage.Literals.EXPRESSION_TEMPORARIE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TempVariable> getTempVariableL()
  {
    if (tempVariableL == null)
    {
      tempVariableL = new EObjectContainmentEList<TempVariable>(TempVariable.class, this, GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_L);
    }
    return tempVariableL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TempVariable> getTempVariableR1()
  {
    if (tempVariableR1 == null)
    {
      tempVariableR1 = new EObjectContainmentEList<TempVariable>(TempVariable.class, this, GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R1);
    }
    return tempVariableR1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ArithmeticOperation> getArithmeticOperation()
  {
    if (arithmeticOperation == null)
    {
      arithmeticOperation = new EObjectContainmentEList<ArithmeticOperation>(ArithmeticOperation.class, this, GimpleDslPackage.EXPRESSION_TEMPORARIE__ARITHMETIC_OPERATION);
    }
    return arithmeticOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TempVariable> getTempVariableR2()
  {
    if (tempVariableR2 == null)
    {
      tempVariableR2 = new EObjectContainmentEList<TempVariable>(TempVariable.class, this, GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R2);
    }
    return tempVariableR2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_L:
        return ((InternalEList<?>)getTempVariableL()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R1:
        return ((InternalEList<?>)getTempVariableR1()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__ARITHMETIC_OPERATION:
        return ((InternalEList<?>)getArithmeticOperation()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R2:
        return ((InternalEList<?>)getTempVariableR2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_L:
        return getTempVariableL();
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R1:
        return getTempVariableR1();
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__ARITHMETIC_OPERATION:
        return getArithmeticOperation();
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R2:
        return getTempVariableR2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_L:
        getTempVariableL().clear();
        getTempVariableL().addAll((Collection<? extends TempVariable>)newValue);
        return;
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R1:
        getTempVariableR1().clear();
        getTempVariableR1().addAll((Collection<? extends TempVariable>)newValue);
        return;
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__ARITHMETIC_OPERATION:
        getArithmeticOperation().clear();
        getArithmeticOperation().addAll((Collection<? extends ArithmeticOperation>)newValue);
        return;
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R2:
        getTempVariableR2().clear();
        getTempVariableR2().addAll((Collection<? extends TempVariable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_L:
        getTempVariableL().clear();
        return;
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R1:
        getTempVariableR1().clear();
        return;
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__ARITHMETIC_OPERATION:
        getArithmeticOperation().clear();
        return;
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R2:
        getTempVariableR2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_L:
        return tempVariableL != null && !tempVariableL.isEmpty();
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R1:
        return tempVariableR1 != null && !tempVariableR1.isEmpty();
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__ARITHMETIC_OPERATION:
        return arithmeticOperation != null && !arithmeticOperation.isEmpty();
      case GimpleDslPackage.EXPRESSION_TEMPORARIE__TEMP_VARIABLE_R2:
        return tempVariableR2 != null && !tempVariableR2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExpressionTemporarieImpl
