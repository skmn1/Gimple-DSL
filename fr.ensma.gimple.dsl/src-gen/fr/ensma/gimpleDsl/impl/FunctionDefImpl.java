/**
 * generated by Xtext 2.25.0
 */
package fr.ensma.gimpleDsl.impl;

import fr.ensma.gimpleDsl.CodeBlock;
import fr.ensma.gimpleDsl.Function;
import fr.ensma.gimpleDsl.FunctionDef;
import fr.ensma.gimpleDsl.FunctionParam;
import fr.ensma.gimpleDsl.GimpleDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Function Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.ensma.gimpleDsl.impl.FunctionDefImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.FunctionDefImpl#getFunctionparam <em>Functionparam</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.FunctionDefImpl#getCodeBlock <em>Code Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FunctionDefImpl extends MinimalEObjectImpl.Container implements FunctionDef
{
  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected Function name;

  /**
   * The cached value of the '{@link #getFunctionparam() <em>Functionparam</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionparam()
   * @generated
   * @ordered
   */
  protected EList<FunctionParam> functionparam;

  /**
   * The cached value of the '{@link #getCodeBlock() <em>Code Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCodeBlock()
   * @generated
   * @ordered
   */
  protected CodeBlock codeBlock;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GimpleDslPackage.Literals.FUNCTION_DEF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(Function newName, NotificationChain msgs)
  {
    Function oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.FUNCTION_DEF__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(Function newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.FUNCTION_DEF__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.FUNCTION_DEF__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.FUNCTION_DEF__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FunctionParam> getFunctionparam()
  {
    if (functionparam == null)
    {
      functionparam = new EObjectContainmentEList<FunctionParam>(FunctionParam.class, this, GimpleDslPackage.FUNCTION_DEF__FUNCTIONPARAM);
    }
    return functionparam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CodeBlock getCodeBlock()
  {
    return codeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCodeBlock(CodeBlock newCodeBlock, NotificationChain msgs)
  {
    CodeBlock oldCodeBlock = codeBlock;
    codeBlock = newCodeBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK, oldCodeBlock, newCodeBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCodeBlock(CodeBlock newCodeBlock)
  {
    if (newCodeBlock != codeBlock)
    {
      NotificationChain msgs = null;
      if (codeBlock != null)
        msgs = ((InternalEObject)codeBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK, null, msgs);
      if (newCodeBlock != null)
        msgs = ((InternalEObject)newCodeBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK, null, msgs);
      msgs = basicSetCodeBlock(newCodeBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK, newCodeBlock, newCodeBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GimpleDslPackage.FUNCTION_DEF__NAME:
        return basicSetName(null, msgs);
      case GimpleDslPackage.FUNCTION_DEF__FUNCTIONPARAM:
        return ((InternalEList<?>)getFunctionparam()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK:
        return basicSetCodeBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GimpleDslPackage.FUNCTION_DEF__NAME:
        return getName();
      case GimpleDslPackage.FUNCTION_DEF__FUNCTIONPARAM:
        return getFunctionparam();
      case GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK:
        return getCodeBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GimpleDslPackage.FUNCTION_DEF__NAME:
        setName((Function)newValue);
        return;
      case GimpleDslPackage.FUNCTION_DEF__FUNCTIONPARAM:
        getFunctionparam().clear();
        getFunctionparam().addAll((Collection<? extends FunctionParam>)newValue);
        return;
      case GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK:
        setCodeBlock((CodeBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.FUNCTION_DEF__NAME:
        setName((Function)null);
        return;
      case GimpleDslPackage.FUNCTION_DEF__FUNCTIONPARAM:
        getFunctionparam().clear();
        return;
      case GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK:
        setCodeBlock((CodeBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.FUNCTION_DEF__NAME:
        return name != null;
      case GimpleDslPackage.FUNCTION_DEF__FUNCTIONPARAM:
        return functionparam != null && !functionparam.isEmpty();
      case GimpleDslPackage.FUNCTION_DEF__CODE_BLOCK:
        return codeBlock != null;
    }
    return super.eIsSet(featureID);
  }

} //FunctionDefImpl
