/**
 * generated by Xtext 2.25.0
 */
package fr.ensma.gimpleDsl.impl;

import fr.ensma.gimpleDsl.GimpleDslPackage;
import fr.ensma.gimpleDsl.SwitchCase;
import fr.ensma.gimpleDsl.SwitchDefaultCase;
import fr.ensma.gimpleDsl.SwitchStatment;
import fr.ensma.gimpleDsl.TempVariable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Switch Statment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.ensma.gimpleDsl.impl.SwitchStatmentImpl#getTempVariableRef <em>Temp Variable Ref</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.SwitchStatmentImpl#getSwitchDefaultCase <em>Switch Default Case</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.SwitchStatmentImpl#getSwitchCase1 <em>Switch Case1</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SwitchStatmentImpl extends MinimalEObjectImpl.Container implements SwitchStatment
{
  /**
   * The cached value of the '{@link #getTempVariableRef() <em>Temp Variable Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempVariableRef()
   * @generated
   * @ordered
   */
  protected TempVariable tempVariableRef;

  /**
   * The cached value of the '{@link #getSwitchDefaultCase() <em>Switch Default Case</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitchDefaultCase()
   * @generated
   * @ordered
   */
  protected EList<SwitchDefaultCase> switchDefaultCase;

  /**
   * The cached value of the '{@link #getSwitchCase1() <em>Switch Case1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitchCase1()
   * @generated
   * @ordered
   */
  protected EList<SwitchCase> switchCase1;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SwitchStatmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GimpleDslPackage.Literals.SWITCH_STATMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TempVariable getTempVariableRef()
  {
    if (tempVariableRef != null && tempVariableRef.eIsProxy())
    {
      InternalEObject oldTempVariableRef = (InternalEObject)tempVariableRef;
      tempVariableRef = (TempVariable)eResolveProxy(oldTempVariableRef);
      if (tempVariableRef != oldTempVariableRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GimpleDslPackage.SWITCH_STATMENT__TEMP_VARIABLE_REF, oldTempVariableRef, tempVariableRef));
      }
    }
    return tempVariableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TempVariable basicGetTempVariableRef()
  {
    return tempVariableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTempVariableRef(TempVariable newTempVariableRef)
  {
    TempVariable oldTempVariableRef = tempVariableRef;
    tempVariableRef = newTempVariableRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.SWITCH_STATMENT__TEMP_VARIABLE_REF, oldTempVariableRef, tempVariableRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SwitchDefaultCase> getSwitchDefaultCase()
  {
    if (switchDefaultCase == null)
    {
      switchDefaultCase = new EObjectContainmentEList<SwitchDefaultCase>(SwitchDefaultCase.class, this, GimpleDslPackage.SWITCH_STATMENT__SWITCH_DEFAULT_CASE);
    }
    return switchDefaultCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SwitchCase> getSwitchCase1()
  {
    if (switchCase1 == null)
    {
      switchCase1 = new EObjectContainmentEList<SwitchCase>(SwitchCase.class, this, GimpleDslPackage.SWITCH_STATMENT__SWITCH_CASE1);
    }
    return switchCase1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_DEFAULT_CASE:
        return ((InternalEList<?>)getSwitchDefaultCase()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_CASE1:
        return ((InternalEList<?>)getSwitchCase1()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GimpleDslPackage.SWITCH_STATMENT__TEMP_VARIABLE_REF:
        if (resolve) return getTempVariableRef();
        return basicGetTempVariableRef();
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_DEFAULT_CASE:
        return getSwitchDefaultCase();
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_CASE1:
        return getSwitchCase1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GimpleDslPackage.SWITCH_STATMENT__TEMP_VARIABLE_REF:
        setTempVariableRef((TempVariable)newValue);
        return;
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_DEFAULT_CASE:
        getSwitchDefaultCase().clear();
        getSwitchDefaultCase().addAll((Collection<? extends SwitchDefaultCase>)newValue);
        return;
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_CASE1:
        getSwitchCase1().clear();
        getSwitchCase1().addAll((Collection<? extends SwitchCase>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.SWITCH_STATMENT__TEMP_VARIABLE_REF:
        setTempVariableRef((TempVariable)null);
        return;
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_DEFAULT_CASE:
        getSwitchDefaultCase().clear();
        return;
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_CASE1:
        getSwitchCase1().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.SWITCH_STATMENT__TEMP_VARIABLE_REF:
        return tempVariableRef != null;
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_DEFAULT_CASE:
        return switchDefaultCase != null && !switchDefaultCase.isEmpty();
      case GimpleDslPackage.SWITCH_STATMENT__SWITCH_CASE1:
        return switchCase1 != null && !switchCase1.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SwitchStatmentImpl
