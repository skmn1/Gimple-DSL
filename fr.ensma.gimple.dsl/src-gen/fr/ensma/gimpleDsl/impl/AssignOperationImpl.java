/**
 * generated by Xtext 2.25.0
 */
package fr.ensma.gimpleDsl.impl;

import fr.ensma.gimpleDsl.ArithmeticOperation;
import fr.ensma.gimpleDsl.AssignOperation;
import fr.ensma.gimpleDsl.BinaryOperation;
import fr.ensma.gimpleDsl.FunctionCall;
import fr.ensma.gimpleDsl.GimpleDslPackage;
import fr.ensma.gimpleDsl.TempVariable;
import fr.ensma.gimpleDsl.VariableCall;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assign Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.ensma.gimpleDsl.impl.AssignOperationImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.AssignOperationImpl#isCast <em>Cast</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.AssignOperationImpl#getVcall <em>Vcall</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.AssignOperationImpl#getTempVariable <em>Temp Variable</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.AssignOperationImpl#getFunctionCall <em>Function Call</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.AssignOperationImpl#getArithmeticOperation <em>Arithmetic Operation</em>}</li>
 *   <li>{@link fr.ensma.gimpleDsl.impl.AssignOperationImpl#getBinaryOperation <em>Binary Operation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssignOperationImpl extends MinimalEObjectImpl.Container implements AssignOperation
{
  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected EObject name;

  /**
   * The default value of the '{@link #isCast() <em>Cast</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCast()
   * @generated
   * @ordered
   */
  protected static final boolean CAST_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCast() <em>Cast</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCast()
   * @generated
   * @ordered
   */
  protected boolean cast = CAST_EDEFAULT;

  /**
   * The cached value of the '{@link #getVcall() <em>Vcall</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVcall()
   * @generated
   * @ordered
   */
  protected EList<VariableCall> vcall;

  /**
   * The cached value of the '{@link #getTempVariable() <em>Temp Variable</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempVariable()
   * @generated
   * @ordered
   */
  protected EList<TempVariable> tempVariable;

  /**
   * The cached value of the '{@link #getFunctionCall() <em>Function Call</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionCall()
   * @generated
   * @ordered
   */
  protected EList<FunctionCall> functionCall;

  /**
   * The cached value of the '{@link #getArithmeticOperation() <em>Arithmetic Operation</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithmeticOperation()
   * @generated
   * @ordered
   */
  protected EList<ArithmeticOperation> arithmeticOperation;

  /**
   * The cached value of the '{@link #getBinaryOperation() <em>Binary Operation</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBinaryOperation()
   * @generated
   * @ordered
   */
  protected EList<BinaryOperation> binaryOperation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssignOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GimpleDslPackage.Literals.ASSIGN_OPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(EObject newName, NotificationChain msgs)
  {
    EObject oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GimpleDslPackage.ASSIGN_OPERATION__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(EObject newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.ASSIGN_OPERATION__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GimpleDslPackage.ASSIGN_OPERATION__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.ASSIGN_OPERATION__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isCast()
  {
    return cast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCast(boolean newCast)
  {
    boolean oldCast = cast;
    cast = newCast;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GimpleDslPackage.ASSIGN_OPERATION__CAST, oldCast, cast));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VariableCall> getVcall()
  {
    if (vcall == null)
    {
      vcall = new EObjectContainmentEList<VariableCall>(VariableCall.class, this, GimpleDslPackage.ASSIGN_OPERATION__VCALL);
    }
    return vcall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TempVariable> getTempVariable()
  {
    if (tempVariable == null)
    {
      tempVariable = new EObjectContainmentEList<TempVariable>(TempVariable.class, this, GimpleDslPackage.ASSIGN_OPERATION__TEMP_VARIABLE);
    }
    return tempVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FunctionCall> getFunctionCall()
  {
    if (functionCall == null)
    {
      functionCall = new EObjectContainmentEList<FunctionCall>(FunctionCall.class, this, GimpleDslPackage.ASSIGN_OPERATION__FUNCTION_CALL);
    }
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ArithmeticOperation> getArithmeticOperation()
  {
    if (arithmeticOperation == null)
    {
      arithmeticOperation = new EObjectContainmentEList<ArithmeticOperation>(ArithmeticOperation.class, this, GimpleDslPackage.ASSIGN_OPERATION__ARITHMETIC_OPERATION);
    }
    return arithmeticOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BinaryOperation> getBinaryOperation()
  {
    if (binaryOperation == null)
    {
      binaryOperation = new EObjectContainmentEList<BinaryOperation>(BinaryOperation.class, this, GimpleDslPackage.ASSIGN_OPERATION__BINARY_OPERATION);
    }
    return binaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GimpleDslPackage.ASSIGN_OPERATION__NAME:
        return basicSetName(null, msgs);
      case GimpleDslPackage.ASSIGN_OPERATION__VCALL:
        return ((InternalEList<?>)getVcall()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.ASSIGN_OPERATION__TEMP_VARIABLE:
        return ((InternalEList<?>)getTempVariable()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.ASSIGN_OPERATION__FUNCTION_CALL:
        return ((InternalEList<?>)getFunctionCall()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.ASSIGN_OPERATION__ARITHMETIC_OPERATION:
        return ((InternalEList<?>)getArithmeticOperation()).basicRemove(otherEnd, msgs);
      case GimpleDslPackage.ASSIGN_OPERATION__BINARY_OPERATION:
        return ((InternalEList<?>)getBinaryOperation()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GimpleDslPackage.ASSIGN_OPERATION__NAME:
        return getName();
      case GimpleDslPackage.ASSIGN_OPERATION__CAST:
        return isCast();
      case GimpleDslPackage.ASSIGN_OPERATION__VCALL:
        return getVcall();
      case GimpleDslPackage.ASSIGN_OPERATION__TEMP_VARIABLE:
        return getTempVariable();
      case GimpleDslPackage.ASSIGN_OPERATION__FUNCTION_CALL:
        return getFunctionCall();
      case GimpleDslPackage.ASSIGN_OPERATION__ARITHMETIC_OPERATION:
        return getArithmeticOperation();
      case GimpleDslPackage.ASSIGN_OPERATION__BINARY_OPERATION:
        return getBinaryOperation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GimpleDslPackage.ASSIGN_OPERATION__NAME:
        setName((EObject)newValue);
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__CAST:
        setCast((Boolean)newValue);
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__VCALL:
        getVcall().clear();
        getVcall().addAll((Collection<? extends VariableCall>)newValue);
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__TEMP_VARIABLE:
        getTempVariable().clear();
        getTempVariable().addAll((Collection<? extends TempVariable>)newValue);
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__FUNCTION_CALL:
        getFunctionCall().clear();
        getFunctionCall().addAll((Collection<? extends FunctionCall>)newValue);
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__ARITHMETIC_OPERATION:
        getArithmeticOperation().clear();
        getArithmeticOperation().addAll((Collection<? extends ArithmeticOperation>)newValue);
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__BINARY_OPERATION:
        getBinaryOperation().clear();
        getBinaryOperation().addAll((Collection<? extends BinaryOperation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.ASSIGN_OPERATION__NAME:
        setName((EObject)null);
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__CAST:
        setCast(CAST_EDEFAULT);
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__VCALL:
        getVcall().clear();
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__TEMP_VARIABLE:
        getTempVariable().clear();
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__FUNCTION_CALL:
        getFunctionCall().clear();
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__ARITHMETIC_OPERATION:
        getArithmeticOperation().clear();
        return;
      case GimpleDslPackage.ASSIGN_OPERATION__BINARY_OPERATION:
        getBinaryOperation().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GimpleDslPackage.ASSIGN_OPERATION__NAME:
        return name != null;
      case GimpleDslPackage.ASSIGN_OPERATION__CAST:
        return cast != CAST_EDEFAULT;
      case GimpleDslPackage.ASSIGN_OPERATION__VCALL:
        return vcall != null && !vcall.isEmpty();
      case GimpleDslPackage.ASSIGN_OPERATION__TEMP_VARIABLE:
        return tempVariable != null && !tempVariable.isEmpty();
      case GimpleDslPackage.ASSIGN_OPERATION__FUNCTION_CALL:
        return functionCall != null && !functionCall.isEmpty();
      case GimpleDslPackage.ASSIGN_OPERATION__ARITHMETIC_OPERATION:
        return arithmeticOperation != null && !arithmeticOperation.isEmpty();
      case GimpleDslPackage.ASSIGN_OPERATION__BINARY_OPERATION:
        return binaryOperation != null && !binaryOperation.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (cast: ");
    result.append(cast);
    result.append(')');
    return result.toString();
  }

} //AssignOperationImpl
