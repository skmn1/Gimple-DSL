/**
 * generated by Xtext 2.25.0
 */
package fr.ensma.gimpleDsl.impl;

import fr.ensma.gimpleDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GimpleDslFactoryImpl extends EFactoryImpl implements GimpleDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GimpleDslFactory init()
  {
    try
    {
      GimpleDslFactory theGimpleDslFactory = (GimpleDslFactory)EPackage.Registry.INSTANCE.getEFactory(GimpleDslPackage.eNS_URI);
      if (theGimpleDslFactory != null)
      {
        return theGimpleDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GimpleDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GimpleDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GimpleDslPackage.TAC: return createTAC();
      case GimpleDslPackage.FUNCTION_DEF: return createFunctionDef();
      case GimpleDslPackage.CODE_BLOCK: return createCodeBlock();
      case GimpleDslPackage.INSTRUCTION: return createInstruction();
      case GimpleDslPackage.FUNCTION_CALL: return createFunctionCall();
      case GimpleDslPackage.FUNCTION_PARAM: return createFunctionParam();
      case GimpleDslPackage.FUNCTION_ARGUMENT: return createFunctionArgument();
      case GimpleDslPackage.ARGUMENT: return createArgument();
      case GimpleDslPackage.STRUCT_VARIABLE_CALL: return createStructVariableCall();
      case GimpleDslPackage.STRUCT: return createStruct();
      case GimpleDslPackage.GOTO: return createGoto();
      case GimpleDslPackage.LABEL_DEF: return createLabelDef();
      case GimpleDslPackage.SWITCH_STATMENT: return createSwitchStatment();
      case GimpleDslPackage.SWITCH_DEFAULT_CASE: return createSwitchDefaultCase();
      case GimpleDslPackage.SWITCH_CASE: return createSwitchCase();
      case GimpleDslPackage.SWITCH_LABEL_DEF: return createSwitchLabelDef();
      case GimpleDslPackage.SWITCH_LABEL: return createSwitchLabel();
      case GimpleDslPackage.LABEL: return createLabel();
      case GimpleDslPackage.IF: return createIf();
      case GimpleDslPackage.ASSIGN_OPERATION: return createAssignOperation();
      case GimpleDslPackage.DECLARATION: return createDeclaration();
      case GimpleDslPackage.VARIABLE_CALL: return createVariableCall();
      case GimpleDslPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case GimpleDslPackage.EXPRESSION_TEMPORARIE: return createExpressionTemporarie();
      case GimpleDslPackage.TEMP_VARIABLE: return createTempVariable();
      case GimpleDslPackage.LOCAL_VARIABLE: return createLocalVariable();
      case GimpleDslPackage.FUNCTION: return createFunction();
      case GimpleDslPackage.DEBUG_TAG: return createDebugTag();
      case GimpleDslPackage.COMMENT_LINE: return createCommentLine();
      case GimpleDslPackage.CAST: return createCast();
      case GimpleDslPackage.DATA_TYPE: return createDataType();
      case GimpleDslPackage.BOULEAN_EXRPESSION: return createBouleanExrpession();
      case GimpleDslPackage.ARITHMETIC_OPERATION: return createArithmeticOperation();
      case GimpleDslPackage.BINARY_OPERATION: return createBinaryOperation();
      case GimpleDslPackage.LOGICAL_OPERATION: return createLogicalOperation();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TAC createTAC()
  {
    TACImpl tac = new TACImpl();
    return tac;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionDef createFunctionDef()
  {
    FunctionDefImpl functionDef = new FunctionDefImpl();
    return functionDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CodeBlock createCodeBlock()
  {
    CodeBlockImpl codeBlock = new CodeBlockImpl();
    return codeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionParam createFunctionParam()
  {
    FunctionParamImpl functionParam = new FunctionParamImpl();
    return functionParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionArgument createFunctionArgument()
  {
    FunctionArgumentImpl functionArgument = new FunctionArgumentImpl();
    return functionArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Argument createArgument()
  {
    ArgumentImpl argument = new ArgumentImpl();
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StructVariableCall createStructVariableCall()
  {
    StructVariableCallImpl structVariableCall = new StructVariableCallImpl();
    return structVariableCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Struct createStruct()
  {
    StructImpl struct = new StructImpl();
    return struct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Goto createGoto()
  {
    GotoImpl goto_ = new GotoImpl();
    return goto_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelDef createLabelDef()
  {
    LabelDefImpl labelDef = new LabelDefImpl();
    return labelDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchStatment createSwitchStatment()
  {
    SwitchStatmentImpl switchStatment = new SwitchStatmentImpl();
    return switchStatment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchDefaultCase createSwitchDefaultCase()
  {
    SwitchDefaultCaseImpl switchDefaultCase = new SwitchDefaultCaseImpl();
    return switchDefaultCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchCase createSwitchCase()
  {
    SwitchCaseImpl switchCase = new SwitchCaseImpl();
    return switchCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchLabelDef createSwitchLabelDef()
  {
    SwitchLabelDefImpl switchLabelDef = new SwitchLabelDefImpl();
    return switchLabelDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwitchLabel createSwitchLabel()
  {
    SwitchLabelImpl switchLabel = new SwitchLabelImpl();
    return switchLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Label createLabel()
  {
    LabelImpl label = new LabelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public If createIf()
  {
    IfImpl if_ = new IfImpl();
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignOperation createAssignOperation()
  {
    AssignOperationImpl assignOperation = new AssignOperationImpl();
    return assignOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableCall createVariableCall()
  {
    VariableCallImpl variableCall = new VariableCallImpl();
    return variableCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionTemporarie createExpressionTemporarie()
  {
    ExpressionTemporarieImpl expressionTemporarie = new ExpressionTemporarieImpl();
    return expressionTemporarie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TempVariable createTempVariable()
  {
    TempVariableImpl tempVariable = new TempVariableImpl();
    return tempVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalVariable createLocalVariable()
  {
    LocalVariableImpl localVariable = new LocalVariableImpl();
    return localVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DebugTag createDebugTag()
  {
    DebugTagImpl debugTag = new DebugTagImpl();
    return debugTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommentLine createCommentLine()
  {
    CommentLineImpl commentLine = new CommentLineImpl();
    return commentLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cast createCast()
  {
    CastImpl cast = new CastImpl();
    return cast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BouleanExrpession createBouleanExrpession()
  {
    BouleanExrpessionImpl bouleanExrpession = new BouleanExrpessionImpl();
    return bouleanExrpession;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticOperation createArithmeticOperation()
  {
    ArithmeticOperationImpl arithmeticOperation = new ArithmeticOperationImpl();
    return arithmeticOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryOperation createBinaryOperation()
  {
    BinaryOperationImpl binaryOperation = new BinaryOperationImpl();
    return binaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalOperation createLogicalOperation()
  {
    LogicalOperationImpl logicalOperation = new LogicalOperationImpl();
    return logicalOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GimpleDslPackage getGimpleDslPackage()
  {
    return (GimpleDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GimpleDslPackage getPackage()
  {
    return GimpleDslPackage.eINSTANCE;
  }

} //GimpleDslFactoryImpl
