/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.serializer;

import com.google.inject.Inject;
import fr.ensma.services.GimpleDslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class GimpleDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GimpleDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Argument_AmpersandKeyword_0_1_0_q;
	protected AbstractElementAlias match_Argument___FullStopKeyword_0_1_2_0_IDTerminalRuleCall_0_1_2_1__a;
	protected AbstractElementAlias match_ArithmeticOperation_AsteriskKeyword_2_1_or_HyphenMinusKeyword_1_1_or_PlusSignKeyword_0_1_or_SolidusKeyword_3_1;
	protected AbstractElementAlias match_AssignOperation_____INTTerminalRuleCall_4_0_0_2_or___AmpersandKeyword_4_0_0_3_0_CLOBBERKeyword_4_0_0_3_1_____HyphenMinusGreaterThanSignKeyword_4_0_1_0_IDTerminalRuleCall_4_0_1_1__a;
	protected AbstractElementAlias match_BinaryOperation_AmpersandKeyword_0_1_or_VerticalLineKeyword_1_1;
	protected AbstractElementAlias match_Cast_ShortKeyword_1_q;
	protected AbstractElementAlias match_Cast___SignedKeyword_2_0_or_UnsignedKeyword_2_1__q;
	protected AbstractElementAlias match_CodeBlock_ReturnKeyword_2_q;
	protected AbstractElementAlias match_ExpressionTemporarie_IDTerminalRuleCall_2_1_or_INTTerminalRuleCall_2_2;
	protected AbstractElementAlias match_ExpressionTemporarie_IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2;
	protected AbstractElementAlias match_FunctionCall_CommaKeyword_3_1_q;
	protected AbstractElementAlias match_FunctionDef_CommaKeyword_3_1_q;
	protected AbstractElementAlias match_FunctionParam_AsteriskKeyword_0_3_q;
	protected AbstractElementAlias match_FunctionParam_AsteriskKeyword_1_1_q;
	protected AbstractElementAlias match_LogicalOperation_AndKeyword_0_1_or_EqualsSignEqualsSignKeyword_6_1_or_EqualsSignGreaterThanSignKeyword_5_1_or_EqualsSignLessThanSignKeyword_2_1_or_ExclamationMarkEqualsSignKeyword_7_1_or_GreaterThanSignKeyword_4_1_or_LessThanSignKeyword_3_1_or_OrKeyword_1_1;
	protected AbstractElementAlias match_Struct_AsteriskKeyword_3_q;
	protected AbstractElementAlias match_SwitchCase_CommaKeyword_4_q;
	protected AbstractElementAlias match_SwitchCase_INVKeyword_3_q;
	protected AbstractElementAlias match_SwitchDefaultCase_INVKeyword_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GimpleDslGrammarAccess) access;
		match_Argument_AmpersandKeyword_0_1_0_q = new TokenAlias(false, true, grammarAccess.getArgumentAccess().getAmpersandKeyword_0_1_0());
		match_Argument___FullStopKeyword_0_1_2_0_IDTerminalRuleCall_0_1_2_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getArgumentAccess().getFullStopKeyword_0_1_2_0()), new TokenAlias(false, false, grammarAccess.getArgumentAccess().getIDTerminalRuleCall_0_1_2_1()));
		match_ArithmeticOperation_AsteriskKeyword_2_1_or_HyphenMinusKeyword_1_1_or_PlusSignKeyword_0_1_or_SolidusKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getArithmeticOperationAccess().getAsteriskKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getArithmeticOperationAccess().getHyphenMinusKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getArithmeticOperationAccess().getPlusSignKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getArithmeticOperationAccess().getSolidusKeyword_3_1()));
		match_AssignOperation_____INTTerminalRuleCall_4_0_0_2_or___AmpersandKeyword_4_0_0_3_0_CLOBBERKeyword_4_0_0_3_1_____HyphenMinusGreaterThanSignKeyword_4_0_1_0_IDTerminalRuleCall_4_0_1_1__a = new GroupAlias(true, true, new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getAmpersandKeyword_4_0_0_3_0()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getCLOBBERKeyword_4_0_0_3_1())), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getINTTerminalRuleCall_4_0_0_2())), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getHyphenMinusGreaterThanSignKeyword_4_0_1_0()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_0_1_1()));
		match_BinaryOperation_AmpersandKeyword_0_1_or_VerticalLineKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBinaryOperationAccess().getAmpersandKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getBinaryOperationAccess().getVerticalLineKeyword_1_1()));
		match_Cast_ShortKeyword_1_q = new TokenAlias(false, true, grammarAccess.getCastAccess().getShortKeyword_1());
		match_Cast___SignedKeyword_2_0_or_UnsignedKeyword_2_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getCastAccess().getSignedKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getCastAccess().getUnsignedKeyword_2_1()));
		match_CodeBlock_ReturnKeyword_2_q = new TokenAlias(false, true, grammarAccess.getCodeBlockAccess().getReturnKeyword_2());
		match_ExpressionTemporarie_IDTerminalRuleCall_2_1_or_INTTerminalRuleCall_2_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionTemporarieAccess().getIDTerminalRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getExpressionTemporarieAccess().getINTTerminalRuleCall_2_2()));
		match_ExpressionTemporarie_IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionTemporarieAccess().getIDTerminalRuleCall_3_1_1()), new TokenAlias(false, false, grammarAccess.getExpressionTemporarieAccess().getINTTerminalRuleCall_3_1_2()));
		match_FunctionCall_CommaKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1());
		match_FunctionDef_CommaKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getFunctionDefAccess().getCommaKeyword_3_1());
		match_FunctionParam_AsteriskKeyword_0_3_q = new TokenAlias(false, true, grammarAccess.getFunctionParamAccess().getAsteriskKeyword_0_3());
		match_FunctionParam_AsteriskKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getFunctionParamAccess().getAsteriskKeyword_1_1());
		match_LogicalOperation_AndKeyword_0_1_or_EqualsSignEqualsSignKeyword_6_1_or_EqualsSignGreaterThanSignKeyword_5_1_or_EqualsSignLessThanSignKeyword_2_1_or_ExclamationMarkEqualsSignKeyword_7_1_or_GreaterThanSignKeyword_4_1_or_LessThanSignKeyword_3_1_or_OrKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getAndKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignEqualsSignKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignGreaterThanSignKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignLessThanSignKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getExclamationMarkEqualsSignKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getGreaterThanSignKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getLessThanSignKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getOrKeyword_1_1()));
		match_Struct_AsteriskKeyword_3_q = new TokenAlias(false, true, grammarAccess.getStructAccess().getAsteriskKeyword_3());
		match_SwitchCase_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getSwitchCaseAccess().getCommaKeyword_4());
		match_SwitchCase_INVKeyword_3_q = new TokenAlias(false, true, grammarAccess.getSwitchCaseAccess().getINVKeyword_3());
		match_SwitchDefaultCase_INVKeyword_3_q = new TokenAlias(false, true, grammarAccess.getSwitchDefaultCaseAccess().getINVKeyword_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Argument_AmpersandKeyword_0_1_0_q.equals(syntax))
				emit_Argument_AmpersandKeyword_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Argument___FullStopKeyword_0_1_2_0_IDTerminalRuleCall_0_1_2_1__a.equals(syntax))
				emit_Argument___FullStopKeyword_0_1_2_0_IDTerminalRuleCall_0_1_2_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArithmeticOperation_AsteriskKeyword_2_1_or_HyphenMinusKeyword_1_1_or_PlusSignKeyword_0_1_or_SolidusKeyword_3_1.equals(syntax))
				emit_ArithmeticOperation_AsteriskKeyword_2_1_or_HyphenMinusKeyword_1_1_or_PlusSignKeyword_0_1_or_SolidusKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssignOperation_____INTTerminalRuleCall_4_0_0_2_or___AmpersandKeyword_4_0_0_3_0_CLOBBERKeyword_4_0_0_3_1_____HyphenMinusGreaterThanSignKeyword_4_0_1_0_IDTerminalRuleCall_4_0_1_1__a.equals(syntax))
				emit_AssignOperation_____INTTerminalRuleCall_4_0_0_2_or___AmpersandKeyword_4_0_0_3_0_CLOBBERKeyword_4_0_0_3_1_____HyphenMinusGreaterThanSignKeyword_4_0_1_0_IDTerminalRuleCall_4_0_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BinaryOperation_AmpersandKeyword_0_1_or_VerticalLineKeyword_1_1.equals(syntax))
				emit_BinaryOperation_AmpersandKeyword_0_1_or_VerticalLineKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Cast_ShortKeyword_1_q.equals(syntax))
				emit_Cast_ShortKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Cast___SignedKeyword_2_0_or_UnsignedKeyword_2_1__q.equals(syntax))
				emit_Cast___SignedKeyword_2_0_or_UnsignedKeyword_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CodeBlock_ReturnKeyword_2_q.equals(syntax))
				emit_CodeBlock_ReturnKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionTemporarie_IDTerminalRuleCall_2_1_or_INTTerminalRuleCall_2_2.equals(syntax))
				emit_ExpressionTemporarie_IDTerminalRuleCall_2_1_or_INTTerminalRuleCall_2_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionTemporarie_IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2.equals(syntax))
				emit_ExpressionTemporarie_IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionCall_CommaKeyword_3_1_q.equals(syntax))
				emit_FunctionCall_CommaKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionDef_CommaKeyword_3_1_q.equals(syntax))
				emit_FunctionDef_CommaKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionParam_AsteriskKeyword_0_3_q.equals(syntax))
				emit_FunctionParam_AsteriskKeyword_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionParam_AsteriskKeyword_1_1_q.equals(syntax))
				emit_FunctionParam_AsteriskKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LogicalOperation_AndKeyword_0_1_or_EqualsSignEqualsSignKeyword_6_1_or_EqualsSignGreaterThanSignKeyword_5_1_or_EqualsSignLessThanSignKeyword_2_1_or_ExclamationMarkEqualsSignKeyword_7_1_or_GreaterThanSignKeyword_4_1_or_LessThanSignKeyword_3_1_or_OrKeyword_1_1.equals(syntax))
				emit_LogicalOperation_AndKeyword_0_1_or_EqualsSignEqualsSignKeyword_6_1_or_EqualsSignGreaterThanSignKeyword_5_1_or_EqualsSignLessThanSignKeyword_2_1_or_ExclamationMarkEqualsSignKeyword_7_1_or_GreaterThanSignKeyword_4_1_or_LessThanSignKeyword_3_1_or_OrKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Struct_AsteriskKeyword_3_q.equals(syntax))
				emit_Struct_AsteriskKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchCase_CommaKeyword_4_q.equals(syntax))
				emit_SwitchCase_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchCase_INVKeyword_3_q.equals(syntax))
				emit_SwitchCase_INVKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchDefaultCase_INVKeyword_3_q.equals(syntax))
				emit_SwitchDefaultCase_INVKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '&'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_Argument_AmpersandKeyword_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('.' ID)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_Argument___FullStopKeyword_0_1_2_0_IDTerminalRuleCall_0_1_2_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+' | '-' | '*' | '/'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ArithmeticOperation_AsteriskKeyword_2_1_or_HyphenMinusKeyword_1_1_or_PlusSignKeyword_0_1_or_SolidusKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ((INT | ('&' '{CLOBBER}')) '->' ID)*
	 *
	 * This ambiguous syntax occurs at:
	 *     arithmeticOperation+=ArithmeticOperation (ambiguity) ';' (rule end)
	 *     arithmeticOperation+=ArithmeticOperation (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     arithmeticOperation+=ArithmeticOperation (ambiguity) binaryOperation+=BinaryOperation
	 *     arithmeticOperation+=ArithmeticOperation (ambiguity) functionCall+=FunctionCall
	 *     arithmeticOperation+=ArithmeticOperation (ambiguity) tempVariable+=TempVariable
	 *     arithmeticOperation+=ArithmeticOperation (ambiguity) vcall+=VariableCall
	 *     binaryOperation+=BinaryOperation (ambiguity) ';' (rule end)
	 *     binaryOperation+=BinaryOperation (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     binaryOperation+=BinaryOperation (ambiguity) binaryOperation+=BinaryOperation
	 *     binaryOperation+=BinaryOperation (ambiguity) functionCall+=FunctionCall
	 *     binaryOperation+=BinaryOperation (ambiguity) tempVariable+=TempVariable
	 *     binaryOperation+=BinaryOperation (ambiguity) vcall+=VariableCall
	 *     cast?=Cast (ambiguity) ';' (rule end)
	 *     cast?=Cast (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     cast?=Cast (ambiguity) binaryOperation+=BinaryOperation
	 *     cast?=Cast (ambiguity) functionCall+=FunctionCall
	 *     cast?=Cast (ambiguity) tempVariable+=TempVariable
	 *     cast?=Cast (ambiguity) vcall+=VariableCall
	 *     functionCall+=FunctionCall '->' ID (ambiguity) ';' (rule end)
	 *     functionCall+=FunctionCall '->' ID (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     functionCall+=FunctionCall '->' ID (ambiguity) binaryOperation+=BinaryOperation
	 *     functionCall+=FunctionCall '->' ID (ambiguity) functionCall+=FunctionCall
	 *     functionCall+=FunctionCall '->' ID (ambiguity) tempVariable+=TempVariable
	 *     functionCall+=FunctionCall '->' ID (ambiguity) vcall+=VariableCall
	 *     name=StructVariableCall '=' (ambiguity) ';' (rule end)
	 *     name=StructVariableCall '=' (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     name=StructVariableCall '=' (ambiguity) binaryOperation+=BinaryOperation
	 *     name=StructVariableCall '=' (ambiguity) functionCall+=FunctionCall
	 *     name=StructVariableCall '=' (ambiguity) tempVariable+=TempVariable
	 *     name=StructVariableCall '=' (ambiguity) vcall+=VariableCall
	 *     name=TempVariable '=' (ambiguity) ';' (rule end)
	 *     name=TempVariable '=' (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     name=TempVariable '=' (ambiguity) binaryOperation+=BinaryOperation
	 *     name=TempVariable '=' (ambiguity) functionCall+=FunctionCall
	 *     name=TempVariable '=' (ambiguity) tempVariable+=TempVariable
	 *     name=TempVariable '=' (ambiguity) vcall+=VariableCall
	 *     name=VariableCall '=' (ambiguity) ';' (rule end)
	 *     name=VariableCall '=' (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     name=VariableCall '=' (ambiguity) binaryOperation+=BinaryOperation
	 *     name=VariableCall '=' (ambiguity) functionCall+=FunctionCall
	 *     name=VariableCall '=' (ambiguity) tempVariable+=TempVariable
	 *     name=VariableCall '=' (ambiguity) vcall+=VariableCall
	 *     tempVariable+=TempVariable '->' ID (ambiguity) ';' (rule end)
	 *     tempVariable+=TempVariable '->' ID (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     tempVariable+=TempVariable '->' ID (ambiguity) binaryOperation+=BinaryOperation
	 *     tempVariable+=TempVariable '->' ID (ambiguity) functionCall+=FunctionCall
	 *     tempVariable+=TempVariable '->' ID (ambiguity) tempVariable+=TempVariable
	 *     tempVariable+=TempVariable '->' ID (ambiguity) vcall+=VariableCall
	 *     vcall+=VariableCall '->' ID (ambiguity) ';' (rule end)
	 *     vcall+=VariableCall '->' ID (ambiguity) arithmeticOperation+=ArithmeticOperation
	 *     vcall+=VariableCall '->' ID (ambiguity) binaryOperation+=BinaryOperation
	 *     vcall+=VariableCall '->' ID (ambiguity) functionCall+=FunctionCall
	 *     vcall+=VariableCall '->' ID (ambiguity) tempVariable+=TempVariable
	 *     vcall+=VariableCall '->' ID (ambiguity) vcall+=VariableCall
	 */
	protected void emit_AssignOperation_____INTTerminalRuleCall_4_0_0_2_or___AmpersandKeyword_4_0_0_3_0_CLOBBERKeyword_4_0_0_3_1_____HyphenMinusGreaterThanSignKeyword_4_0_1_0_IDTerminalRuleCall_4_0_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '&' | '|'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_BinaryOperation_AmpersandKeyword_0_1_or_VerticalLineKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'short'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) ('signed' | 'unsigned')? name='char'
	 *     (rule start) '(' (ambiguity) ('signed' | 'unsigned')? name='float'
	 *     (rule start) '(' (ambiguity) ('signed' | 'unsigned')? name='int'
	 *     (rule start) '(' (ambiguity) ('signed' | 'unsigned')? name='int16_t'
	 *     (rule start) '(' (ambiguity) ('signed' | 'unsigned')? name='uint8_t'
	 */
	protected void emit_Cast_ShortKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('signed' | 'unsigned')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' 'short'? (ambiguity) name='char'
	 *     (rule start) '(' 'short'? (ambiguity) name='float'
	 *     (rule start) '(' 'short'? (ambiguity) name='int'
	 *     (rule start) '(' 'short'? (ambiguity) name='int16_t'
	 *     (rule start) '(' 'short'? (ambiguity) name='uint8_t'
	 */
	protected void emit_Cast___SignedKeyword_2_0_or_UnsignedKeyword_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return;'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     instruction+=Instruction (ambiguity) (rule end)
	 */
	protected void emit_CodeBlock_ReturnKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ID | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     tempVariableL+=TempVariable '=' (ambiguity) ';' (rule end)
	 *     tempVariableL+=TempVariable '=' (ambiguity) arithmeticOperation+=ArithmeticOperation
	 */
	protected void emit_ExpressionTemporarie_IDTerminalRuleCall_2_1_or_INTTerminalRuleCall_2_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ID | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     arithmeticOperation+=ArithmeticOperation (ambiguity) ';' (rule end)
	 *     arithmeticOperation+=ArithmeticOperation (ambiguity) arithmeticOperation+=ArithmeticOperation
	 */
	protected void emit_ExpressionTemporarie_IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     functionArgument+=FunctionArgument (ambiguity) ')' ';' (rule end)
	 *     functionArgument+=FunctionArgument (ambiguity) functionArgument+=FunctionArgument
	 */
	protected void emit_FunctionCall_CommaKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     functionparam+=FunctionParam (ambiguity) ')' '{' CodeBlock=CodeBlock
	 *     functionparam+=FunctionParam (ambiguity) functionparam+=FunctionParam
	 */
	protected void emit_FunctionDef_CommaKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'struct' ID (ambiguity) ID (rule start)
	 */
	protected void emit_FunctionParam_AsteriskKeyword_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'?
	 *
	 * This ambiguous syntax occurs at:
	 *     datatype=DataType (ambiguity) name=ID
	 */
	protected void emit_FunctionParam_AsteriskKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'and' | 
	  *         'or' | 
	  *         '=<' | 
	  *         '<' | 
	  *         '>' | 
	  *         '=>' | 
	  *         '==' | 
	  *         '!='
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' '(' ID (ambiguity) INT ')' '{' codeBlock+=CodeBlock
	 *     (rule start) 'if' '(' ID (ambiguity) INT ')' instruction+=Instruction
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) ID (ambiguity) INT (rule start)
	 */
	protected void emit_LogicalOperation_AndKeyword_0_1_or_EqualsSignEqualsSignKeyword_6_1_or_EqualsSignGreaterThanSignKeyword_5_1_or_EqualsSignLessThanSignKeyword_2_1_or_ExclamationMarkEqualsSignKeyword_7_1_or_GreaterThanSignKeyword_4_1_or_LessThanSignKeyword_3_1_or_OrKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) another=ID
	 */
	protected void emit_Struct_AsteriskKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     switchLabel=[SwitchLabel|QNSL] '[INV]'? (ambiguity) (rule end)
	 */
	protected void emit_SwitchCase_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[INV]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     switchLabel=[SwitchLabel|QNSL] (ambiguity) ','? (rule end)
	 */
	protected void emit_SwitchCase_INVKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[INV]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     switchLabel=[SwitchLabel|QNSL] (ambiguity) ',' (rule end)
	 */
	protected void emit_SwitchDefaultCase_INVKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
