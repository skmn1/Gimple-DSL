/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.ensma.ide.contentassist.antlr.internal.InternalGimpleDslParser;
import fr.ensma.services.GimpleDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GimpleDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GimpleDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GimpleDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTACAccess().getAlternatives(), "rule__TAC__Alternatives");
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getFunctionParamAccess().getAlternatives(), "rule__FunctionParam__Alternatives");
			builder.put(grammarAccess.getArgumentAccess().getAlternatives(), "rule__Argument__Alternatives");
			builder.put(grammarAccess.getIfAccess().getAlternatives_4(), "rule__If__Alternatives_4");
			builder.put(grammarAccess.getAssignOperationAccess().getAlternatives_1(), "rule__AssignOperation__Alternatives_1");
			builder.put(grammarAccess.getAssignOperationAccess().getAlternatives_4(), "rule__AssignOperation__Alternatives_4");
			builder.put(grammarAccess.getAssignOperationAccess().getAlternatives_4_0_0(), "rule__AssignOperation__Alternatives_4_0_0");
			builder.put(grammarAccess.getExpressionTemporarieAccess().getAlternatives_2(), "rule__ExpressionTemporarie__Alternatives_2");
			builder.put(grammarAccess.getExpressionTemporarieAccess().getAlternatives_3_1(), "rule__ExpressionTemporarie__Alternatives_3_1");
			builder.put(grammarAccess.getVARIABLE_INDENTIFIERAccess().getAlternatives_1_1(), "rule__VARIABLE_INDENTIFIER__Alternatives_1_1");
			builder.put(grammarAccess.getCastAccess().getAlternatives_2(), "rule__Cast__Alternatives_2");
			builder.put(grammarAccess.getDataTypeAccess().getNameAlternatives_1_0(), "rule__DataType__NameAlternatives_1_0");
			builder.put(grammarAccess.getArithmeticOperationAccess().getAlternatives(), "rule__ArithmeticOperation__Alternatives");
			builder.put(grammarAccess.getBinaryOperationAccess().getAlternatives(), "rule__BinaryOperation__Alternatives");
			builder.put(grammarAccess.getLogicalOperationAccess().getAlternatives(), "rule__LogicalOperation__Alternatives");
			builder.put(grammarAccess.getFunctionDefAccess().getGroup(), "rule__FunctionDef__Group__0");
			builder.put(grammarAccess.getFunctionDefAccess().getGroup_3(), "rule__FunctionDef__Group_3__0");
			builder.put(grammarAccess.getCodeBlockAccess().getGroup(), "rule__CodeBlock__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
			builder.put(grammarAccess.getFunctionParamAccess().getGroup_0(), "rule__FunctionParam__Group_0__0");
			builder.put(grammarAccess.getFunctionParamAccess().getGroup_1(), "rule__FunctionParam__Group_1__0");
			builder.put(grammarAccess.getFunctionArgumentAccess().getGroup(), "rule__FunctionArgument__Group__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup_0(), "rule__Argument__Group_0__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup_0_1(), "rule__Argument__Group_0_1__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup_0_1_2(), "rule__Argument__Group_0_1_2__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup_1(), "rule__Argument__Group_1__0");
			builder.put(grammarAccess.getStructVariableCallAccess().getGroup(), "rule__StructVariableCall__Group__0");
			builder.put(grammarAccess.getStructAccess().getGroup(), "rule__Struct__Group__0");
			builder.put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
			builder.put(grammarAccess.getLabelDefAccess().getGroup(), "rule__LabelDef__Group__0");
			builder.put(grammarAccess.getSwitchStatmentAccess().getGroup(), "rule__SwitchStatment__Group__0");
			builder.put(grammarAccess.getSwitchDefaultCaseAccess().getGroup(), "rule__SwitchDefaultCase__Group__0");
			builder.put(grammarAccess.getSwitchCaseAccess().getGroup(), "rule__SwitchCase__Group__0");
			builder.put(grammarAccess.getSwitchLabelAccess().getGroup(), "rule__SwitchLabel__Group__0");
			builder.put(grammarAccess.getQNSLAccess().getGroup(), "rule__QNSL__Group__0");
			builder.put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup_4_1(), "rule__If__Group_4_1__0");
			builder.put(grammarAccess.getAssignOperationAccess().getGroup(), "rule__AssignOperation__Group__0");
			builder.put(grammarAccess.getAssignOperationAccess().getGroup_4_0(), "rule__AssignOperation__Group_4_0__0");
			builder.put(grammarAccess.getAssignOperationAccess().getGroup_4_0_0_3(), "rule__AssignOperation__Group_4_0_0_3__0");
			builder.put(grammarAccess.getAssignOperationAccess().getGroup_4_0_1(), "rule__AssignOperation__Group_4_0_1__0");
			builder.put(grammarAccess.getConstantDelarationAccess().getGroup(), "rule__ConstantDelaration__Group__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getExpressionTemporarieAccess().getGroup(), "rule__ExpressionTemporarie__Group__0");
			builder.put(grammarAccess.getExpressionTemporarieAccess().getGroup_3(), "rule__ExpressionTemporarie__Group_3__0");
			builder.put(grammarAccess.getVARIABLE_INDENTIFIERAccess().getGroup(), "rule__VARIABLE_INDENTIFIER__Group__0");
			builder.put(grammarAccess.getVARIABLE_INDENTIFIERAccess().getGroup_1(), "rule__VARIABLE_INDENTIFIER__Group_1__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getCastAccess().getGroup(), "rule__Cast__Group__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
			builder.put(grammarAccess.getArithmeticOperationAccess().getGroup_0(), "rule__ArithmeticOperation__Group_0__0");
			builder.put(grammarAccess.getArithmeticOperationAccess().getGroup_1(), "rule__ArithmeticOperation__Group_1__0");
			builder.put(grammarAccess.getArithmeticOperationAccess().getGroup_2(), "rule__ArithmeticOperation__Group_2__0");
			builder.put(grammarAccess.getArithmeticOperationAccess().getGroup_3(), "rule__ArithmeticOperation__Group_3__0");
			builder.put(grammarAccess.getBinaryOperationAccess().getGroup_0(), "rule__BinaryOperation__Group_0__0");
			builder.put(grammarAccess.getBinaryOperationAccess().getGroup_1(), "rule__BinaryOperation__Group_1__0");
			builder.put(grammarAccess.getLogicalOperationAccess().getGroup_0(), "rule__LogicalOperation__Group_0__0");
			builder.put(grammarAccess.getLogicalOperationAccess().getGroup_1(), "rule__LogicalOperation__Group_1__0");
			builder.put(grammarAccess.getLogicalOperationAccess().getGroup_2(), "rule__LogicalOperation__Group_2__0");
			builder.put(grammarAccess.getLogicalOperationAccess().getGroup_3(), "rule__LogicalOperation__Group_3__0");
			builder.put(grammarAccess.getLogicalOperationAccess().getGroup_4(), "rule__LogicalOperation__Group_4__0");
			builder.put(grammarAccess.getLogicalOperationAccess().getGroup_5(), "rule__LogicalOperation__Group_5__0");
			builder.put(grammarAccess.getLogicalOperationAccess().getGroup_6(), "rule__LogicalOperation__Group_6__0");
			builder.put(grammarAccess.getLogicalOperationAccess().getGroup_7(), "rule__LogicalOperation__Group_7__0");
			builder.put(grammarAccess.getTACAccess().getFunctionDefAssignment_0(), "rule__TAC__FunctionDefAssignment_0");
			builder.put(grammarAccess.getTACAccess().getCommentLineAssignment_1(), "rule__TAC__CommentLineAssignment_1");
			builder.put(grammarAccess.getFunctionDefAccess().getNameAssignment_1(), "rule__FunctionDef__NameAssignment_1");
			builder.put(grammarAccess.getFunctionDefAccess().getFunctionparamAssignment_3_0(), "rule__FunctionDef__FunctionparamAssignment_3_0");
			builder.put(grammarAccess.getFunctionDefAccess().getCodeBlockAssignment_6(), "rule__FunctionDef__CodeBlockAssignment_6");
			builder.put(grammarAccess.getCodeBlockAccess().getInstructionAssignment_1(), "rule__CodeBlock__InstructionAssignment_1");
			builder.put(grammarAccess.getInstructionAccess().getVariableDeclarationAssignment_0(), "rule__Instruction__VariableDeclarationAssignment_0");
			builder.put(grammarAccess.getInstructionAccess().getVaraibleCallAssignment_1(), "rule__Instruction__VaraibleCallAssignment_1");
			builder.put(grammarAccess.getInstructionAccess().getConstantDelarationAssignment_2(), "rule__Instruction__ConstantDelarationAssignment_2");
			builder.put(grammarAccess.getInstructionAccess().getTempVariableAssignment_3(), "rule__Instruction__TempVariableAssignment_3");
			builder.put(grammarAccess.getInstructionAccess().getStructAssignment_4(), "rule__Instruction__StructAssignment_4");
			builder.put(grammarAccess.getInstructionAccess().getLabelDefAssignment_5(), "rule__Instruction__LabelDefAssignment_5");
			builder.put(grammarAccess.getInstructionAccess().getSwitchLabelDefAssignment_6(), "rule__Instruction__SwitchLabelDefAssignment_6");
			builder.put(grammarAccess.getInstructionAccess().getGotoAssignment_7(), "rule__Instruction__GotoAssignment_7");
			builder.put(grammarAccess.getInstructionAccess().getIfAssignment_8(), "rule__Instruction__IfAssignment_8");
			builder.put(grammarAccess.getInstructionAccess().getExpressionTemporarieAssignment_9(), "rule__Instruction__ExpressionTemporarieAssignment_9");
			builder.put(grammarAccess.getInstructionAccess().getSwitchStatementAssignment_10(), "rule__Instruction__SwitchStatementAssignment_10");
			builder.put(grammarAccess.getInstructionAccess().getDebugTagAssignment_11(), "rule__Instruction__DebugTagAssignment_11");
			builder.put(grammarAccess.getInstructionAccess().getFunctionCallAssignment_12(), "rule__Instruction__FunctionCallAssignment_12");
			builder.put(grammarAccess.getInstructionAccess().getAssignOpAssignment_13(), "rule__Instruction__AssignOpAssignment_13");
			builder.put(grammarAccess.getFunctionCallAccess().getCalledFunctionAssignment_1(), "rule__FunctionCall__CalledFunctionAssignment_1");
			builder.put(grammarAccess.getFunctionCallAccess().getFunctionArgumentAssignment_3_0(), "rule__FunctionCall__FunctionArgumentAssignment_3_0");
			builder.put(grammarAccess.getFunctionParamAccess().getDatatypeAssignment_1_0(), "rule__FunctionParam__DatatypeAssignment_1_0");
			builder.put(grammarAccess.getFunctionParamAccess().getNameAssignment_1_2(), "rule__FunctionParam__NameAssignment_1_2");
			builder.put(grammarAccess.getFunctionArgumentAccess().getNameAssignment_1(), "rule__FunctionArgument__NameAssignment_1");
			builder.put(grammarAccess.getArgumentAccess().getNameAssignment_0_1_1(), "rule__Argument__NameAssignment_0_1_1");
			builder.put(grammarAccess.getStructVariableCallAccess().getCalledStructVariableAssignment_0(), "rule__StructVariableCall__CalledStructVariableAssignment_0");
			builder.put(grammarAccess.getStructAccess().getNameAssignment_2(), "rule__Struct__NameAssignment_2");
			builder.put(grammarAccess.getStructAccess().getAnotherAssignment_4(), "rule__Struct__AnotherAssignment_4");
			builder.put(grammarAccess.getGotoAccess().getGotoAssignment_2(), "rule__Goto__GotoAssignment_2");
			builder.put(grammarAccess.getLabelDefAccess().getNameAssignment_1(), "rule__LabelDef__NameAssignment_1");
			builder.put(grammarAccess.getSwitchStatmentAccess().getTempVariableRefAssignment_2(), "rule__SwitchStatment__TempVariableRefAssignment_2");
			builder.put(grammarAccess.getSwitchStatmentAccess().getSwitchDefaultCaseAssignment_5(), "rule__SwitchStatment__SwitchDefaultCaseAssignment_5");
			builder.put(grammarAccess.getSwitchStatmentAccess().getSwitchCase1Assignment_6(), "rule__SwitchStatment__SwitchCase1Assignment_6");
			builder.put(grammarAccess.getSwitchDefaultCaseAccess().getNameAssignment_0(), "rule__SwitchDefaultCase__NameAssignment_0");
			builder.put(grammarAccess.getSwitchDefaultCaseAccess().getSwitchLabelAssignment_2(), "rule__SwitchDefaultCase__SwitchLabelAssignment_2");
			builder.put(grammarAccess.getSwitchCaseAccess().getNameAssignment_0(), "rule__SwitchCase__NameAssignment_0");
			builder.put(grammarAccess.getSwitchCaseAccess().getSwitchLabelAssignment_2(), "rule__SwitchCase__SwitchLabelAssignment_2");
			builder.put(grammarAccess.getSwitchLabelDefAccess().getNameAssignment(), "rule__SwitchLabelDef__NameAssignment");
			builder.put(grammarAccess.getSwitchLabelAccess().getNameAssignment_0(), "rule__SwitchLabel__NameAssignment_0");
			builder.put(grammarAccess.getLabelAccess().getNameAssignment_1(), "rule__Label__NameAssignment_1");
			builder.put(grammarAccess.getIfAccess().getInstructionAssignment_4_0(), "rule__If__InstructionAssignment_4_0");
			builder.put(grammarAccess.getIfAccess().getCodeBlockAssignment_4_1_1(), "rule__If__CodeBlockAssignment_4_1_1");
			builder.put(grammarAccess.getAssignOperationAccess().getNameAssignment_1_0(), "rule__AssignOperation__NameAssignment_1_0");
			builder.put(grammarAccess.getAssignOperationAccess().getNameAssignment_1_1(), "rule__AssignOperation__NameAssignment_1_1");
			builder.put(grammarAccess.getAssignOperationAccess().getNameAssignment_1_2(), "rule__AssignOperation__NameAssignment_1_2");
			builder.put(grammarAccess.getAssignOperationAccess().getCastAssignment_3(), "rule__AssignOperation__CastAssignment_3");
			builder.put(grammarAccess.getAssignOperationAccess().getVcallAssignment_4_0_0_0(), "rule__AssignOperation__VcallAssignment_4_0_0_0");
			builder.put(grammarAccess.getAssignOperationAccess().getTempVariableAssignment_4_0_0_1(), "rule__AssignOperation__TempVariableAssignment_4_0_0_1");
			builder.put(grammarAccess.getAssignOperationAccess().getFunctionCallAssignment_4_0_0_4(), "rule__AssignOperation__FunctionCallAssignment_4_0_0_4");
			builder.put(grammarAccess.getAssignOperationAccess().getArithmeticOperationAssignment_4_1(), "rule__AssignOperation__ArithmeticOperationAssignment_4_1");
			builder.put(grammarAccess.getAssignOperationAccess().getBinaryOperationAssignment_4_2(), "rule__AssignOperation__BinaryOperationAssignment_4_2");
			builder.put(grammarAccess.getConstantDelarationAccess().getNameAssignment_1(), "rule__ConstantDelaration__NameAssignment_1");
			builder.put(grammarAccess.getVariableCallAccess().getCalledVaraibleAssignment(), "rule__VariableCall__CalledVaraibleAssignment");
			builder.put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0(), "rule__VariableDeclaration__TypeAssignment_0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getExpressionTemporarieAccess().getTempVariableLAssignment_0(), "rule__ExpressionTemporarie__TempVariableLAssignment_0");
			builder.put(grammarAccess.getExpressionTemporarieAccess().getTempVariableR1Assignment_2_0(), "rule__ExpressionTemporarie__TempVariableR1Assignment_2_0");
			builder.put(grammarAccess.getExpressionTemporarieAccess().getArithmeticOperationAssignment_3_0(), "rule__ExpressionTemporarie__ArithmeticOperationAssignment_3_0");
			builder.put(grammarAccess.getExpressionTemporarieAccess().getTempVariableR2Assignment_3_1_0(), "rule__ExpressionTemporarie__TempVariableR2Assignment_3_1_0");
			builder.put(grammarAccess.getTempVariableAccess().getNameAssignment(), "rule__TempVariable__NameAssignment");
			builder.put(grammarAccess.getLocalVariableAccess().getNameAssignment(), "rule__LocalVariable__NameAssignment");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getDebugTagAccess().getNameAssignment(), "rule__DebugTag__NameAssignment");
			builder.put(grammarAccess.getCommentLineAccess().getNameAssignment(), "rule__CommentLine__NameAssignment");
			builder.put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GimpleDslGrammarAccess grammarAccess;

	@Override
	protected InternalGimpleDslParser createParser() {
		InternalGimpleDslParser result = new InternalGimpleDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GimpleDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GimpleDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
